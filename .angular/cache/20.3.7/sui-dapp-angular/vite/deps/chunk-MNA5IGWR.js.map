{
  "version": 3,
  "sources": ["../../../../../../node_modules/@mysten/sui/dist/esm/transactions/ObjectCache.js", "../../../../../../node_modules/@mysten/sui/dist/esm/transactions/executor/caching.js", "../../../../../../node_modules/@mysten/sui/dist/esm/transactions/executor/queue.js", "../../../../../../node_modules/@mysten/sui/dist/esm/transactions/executor/serial.js", "../../../../../../node_modules/@mysten/sui/dist/esm/transactions/executor/parallel.js", "../../../../../../node_modules/@mysten/sui/dist/esm/transactions/intents/CoinWithBalance.js", "../../../../../../node_modules/@mysten/sui/dist/esm/transactions/Arguments.js"],
  "sourcesContent": ["var __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar _caches, _cache, _onEffects;\nimport { normalizeSuiAddress } from \"../utils/sui-types.js\";\nclass AsyncCache {\n  async getObject(id) {\n    const [owned, shared] = await Promise.all([\n      this.get(\"OwnedObject\", id),\n      this.get(\"SharedOrImmutableObject\", id)\n    ]);\n    return owned ?? shared ?? null;\n  }\n  async getObjects(ids) {\n    return Promise.all(ids.map((id) => this.getObject(id)));\n  }\n  async addObject(object) {\n    if (object.owner) {\n      await this.set(\"OwnedObject\", object.objectId, object);\n    } else {\n      await this.set(\"SharedOrImmutableObject\", object.objectId, object);\n    }\n    return object;\n  }\n  async addObjects(objects) {\n    await Promise.all(objects.map(async (object) => this.addObject(object)));\n  }\n  async deleteObject(id) {\n    await Promise.all([this.delete(\"OwnedObject\", id), this.delete(\"SharedOrImmutableObject\", id)]);\n  }\n  async deleteObjects(ids) {\n    await Promise.all(ids.map((id) => this.deleteObject(id)));\n  }\n  async getMoveFunctionDefinition(ref) {\n    const functionName = `${normalizeSuiAddress(ref.package)}::${ref.module}::${ref.function}`;\n    return this.get(\"MoveFunction\", functionName);\n  }\n  async addMoveFunctionDefinition(functionEntry) {\n    const pkg = normalizeSuiAddress(functionEntry.package);\n    const functionName = `${pkg}::${functionEntry.module}::${functionEntry.function}`;\n    const entry = {\n      ...functionEntry,\n      package: pkg\n    };\n    await this.set(\"MoveFunction\", functionName, entry);\n    return entry;\n  }\n  async deleteMoveFunctionDefinition(ref) {\n    const functionName = `${normalizeSuiAddress(ref.package)}::${ref.module}::${ref.function}`;\n    await this.delete(\"MoveFunction\", functionName);\n  }\n  async getCustom(key) {\n    return this.get(\"Custom\", key);\n  }\n  async setCustom(key, value) {\n    return this.set(\"Custom\", key, value);\n  }\n  async deleteCustom(key) {\n    return this.delete(\"Custom\", key);\n  }\n}\nclass InMemoryCache extends AsyncCache {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _caches, {\n      OwnedObject: /* @__PURE__ */ new Map(),\n      SharedOrImmutableObject: /* @__PURE__ */ new Map(),\n      MoveFunction: /* @__PURE__ */ new Map(),\n      Custom: /* @__PURE__ */ new Map()\n    });\n  }\n  async get(type, key) {\n    return __privateGet(this, _caches)[type].get(key) ?? null;\n  }\n  async set(type, key, value) {\n    __privateGet(this, _caches)[type].set(key, value);\n  }\n  async delete(type, key) {\n    __privateGet(this, _caches)[type].delete(key);\n  }\n  async clear(type) {\n    if (type) {\n      __privateGet(this, _caches)[type].clear();\n    } else {\n      for (const cache of Object.values(__privateGet(this, _caches))) {\n        cache.clear();\n      }\n    }\n  }\n}\n_caches = new WeakMap();\nclass ObjectCache {\n  constructor({ cache = new InMemoryCache(), onEffects }) {\n    __privateAdd(this, _cache);\n    __privateAdd(this, _onEffects);\n    __privateSet(this, _cache, cache);\n    __privateSet(this, _onEffects, onEffects);\n  }\n  asPlugin() {\n    return async (transactionData, _options, next) => {\n      const unresolvedObjects = transactionData.inputs.filter((input) => input.UnresolvedObject).map((input) => input.UnresolvedObject.objectId);\n      const cached = (await __privateGet(this, _cache).getObjects(unresolvedObjects)).filter(\n        (obj) => obj !== null\n      );\n      const byId = new Map(cached.map((obj) => [obj.objectId, obj]));\n      for (const input of transactionData.inputs) {\n        if (!input.UnresolvedObject) {\n          continue;\n        }\n        const cached2 = byId.get(input.UnresolvedObject.objectId);\n        if (!cached2) {\n          continue;\n        }\n        if (cached2.initialSharedVersion && !input.UnresolvedObject.initialSharedVersion) {\n          input.UnresolvedObject.initialSharedVersion = cached2.initialSharedVersion;\n        } else {\n          if (cached2.version && !input.UnresolvedObject.version) {\n            input.UnresolvedObject.version = cached2.version;\n          }\n          if (cached2.digest && !input.UnresolvedObject.digest) {\n            input.UnresolvedObject.digest = cached2.digest;\n          }\n        }\n      }\n      await Promise.all(\n        transactionData.commands.map(async (commands) => {\n          if (commands.MoveCall) {\n            const def = await this.getMoveFunctionDefinition({\n              package: commands.MoveCall.package,\n              module: commands.MoveCall.module,\n              function: commands.MoveCall.function\n            });\n            if (def) {\n              commands.MoveCall._argumentTypes = def.parameters;\n            }\n          }\n        })\n      );\n      await next();\n      await Promise.all(\n        transactionData.commands.map(async (commands) => {\n          if (commands.MoveCall?._argumentTypes) {\n            await __privateGet(this, _cache).addMoveFunctionDefinition({\n              package: commands.MoveCall.package,\n              module: commands.MoveCall.module,\n              function: commands.MoveCall.function,\n              parameters: commands.MoveCall._argumentTypes\n            });\n          }\n        })\n      );\n    };\n  }\n  async clear() {\n    await __privateGet(this, _cache).clear();\n  }\n  async getMoveFunctionDefinition(ref) {\n    return __privateGet(this, _cache).getMoveFunctionDefinition(ref);\n  }\n  async getObjects(ids) {\n    return __privateGet(this, _cache).getObjects(ids);\n  }\n  async deleteObjects(ids) {\n    return __privateGet(this, _cache).deleteObjects(ids);\n  }\n  async clearOwnedObjects() {\n    await __privateGet(this, _cache).clear(\"OwnedObject\");\n  }\n  async clearCustom() {\n    await __privateGet(this, _cache).clear(\"Custom\");\n  }\n  async getCustom(key) {\n    return __privateGet(this, _cache).getCustom(key);\n  }\n  async setCustom(key, value) {\n    return __privateGet(this, _cache).setCustom(key, value);\n  }\n  async deleteCustom(key) {\n    return __privateGet(this, _cache).deleteCustom(key);\n  }\n  async applyEffects(effects) {\n    var _a;\n    if (!effects.V2) {\n      throw new Error(`Unsupported transaction effects version ${effects.$kind}`);\n    }\n    const { lamportVersion, changedObjects } = effects.V2;\n    const deletedIds = [];\n    const addedObjects = [];\n    changedObjects.forEach(([id, change]) => {\n      if (change.outputState.NotExist) {\n        deletedIds.push(id);\n      } else if (change.outputState.ObjectWrite) {\n        const [digest, owner] = change.outputState.ObjectWrite;\n        addedObjects.push({\n          objectId: id,\n          digest,\n          version: lamportVersion,\n          owner: owner.AddressOwner ?? owner.ObjectOwner ?? null,\n          initialSharedVersion: owner.Shared?.initialSharedVersion ?? null\n        });\n      }\n    });\n    await Promise.all([\n      __privateGet(this, _cache).addObjects(addedObjects),\n      __privateGet(this, _cache).deleteObjects(deletedIds),\n      (_a = __privateGet(this, _onEffects)) == null ? void 0 : _a.call(this, effects)\n    ]);\n  }\n}\n_cache = new WeakMap();\n_onEffects = new WeakMap();\nexport {\n  AsyncCache,\n  InMemoryCache,\n  ObjectCache\n};\n\n", "var __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar _client, _lastDigest;\nimport { bcs } from \"../../bcs/index.js\";\nimport { ObjectCache } from \"../ObjectCache.js\";\nimport { isTransaction } from \"../Transaction.js\";\nclass CachingTransactionExecutor {\n  constructor({\n    client,\n    ...options\n  }) {\n    __privateAdd(this, _client);\n    __privateAdd(this, _lastDigest, null);\n    __privateSet(this, _client, client);\n    this.cache = new ObjectCache(options);\n  }\n  /**\n   * Clears all Owned objects\n   * Immutable objects, Shared objects, and Move function definitions will be preserved\n   */\n  async reset() {\n    await Promise.all([\n      this.cache.clearOwnedObjects(),\n      this.cache.clearCustom(),\n      this.waitForLastTransaction()\n    ]);\n  }\n  async buildTransaction({\n    transaction,\n    ...options\n  }) {\n    transaction.addBuildPlugin(this.cache.asPlugin());\n    return transaction.build({\n      client: __privateGet(this, _client),\n      ...options\n    });\n  }\n  async executeTransaction({\n    transaction,\n    options,\n    ...input\n  }) {\n    const bytes = isTransaction(transaction) ? await this.buildTransaction({ transaction }) : transaction;\n    const results = await __privateGet(this, _client).executeTransactionBlock({\n      ...input,\n      transactionBlock: bytes,\n      options: {\n        ...options,\n        showRawEffects: true\n      }\n    });\n    if (results.rawEffects) {\n      const effects = bcs.TransactionEffects.parse(Uint8Array.from(results.rawEffects));\n      await this.applyEffects(effects);\n    }\n    return results;\n  }\n  async signAndExecuteTransaction({\n    options,\n    transaction,\n    ...input\n  }) {\n    transaction.setSenderIfNotSet(input.signer.toSuiAddress());\n    const bytes = await this.buildTransaction({ transaction });\n    const { signature } = await input.signer.signTransaction(bytes);\n    const results = await this.executeTransaction({\n      transaction: bytes,\n      signature,\n      options\n    });\n    return results;\n  }\n  async applyEffects(effects) {\n    __privateSet(this, _lastDigest, effects.V2?.transactionDigest ?? null);\n    await this.cache.applyEffects(effects);\n  }\n  async waitForLastTransaction() {\n    if (__privateGet(this, _lastDigest)) {\n      await __privateGet(this, _client).waitForTransaction({ digest: __privateGet(this, _lastDigest) });\n      __privateSet(this, _lastDigest, null);\n    }\n  }\n}\n_client = new WeakMap();\n_lastDigest = new WeakMap();\nexport {\n  CachingTransactionExecutor\n};\n\n", "var __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar _queue, _queue2;\nclass SerialQueue {\n  constructor() {\n    __privateAdd(this, _queue, []);\n  }\n  async runTask(task) {\n    return new Promise((resolve, reject) => {\n      __privateGet(this, _queue).push(() => {\n        task().finally(() => {\n          __privateGet(this, _queue).shift();\n          if (__privateGet(this, _queue).length > 0) {\n            __privateGet(this, _queue)[0]();\n          }\n        }).then(resolve, reject);\n      });\n      if (__privateGet(this, _queue).length === 1) {\n        __privateGet(this, _queue)[0]();\n      }\n    });\n  }\n}\n_queue = new WeakMap();\nclass ParallelQueue {\n  constructor(maxTasks) {\n    __privateAdd(this, _queue2, []);\n    this.activeTasks = 0;\n    this.maxTasks = maxTasks;\n  }\n  runTask(task) {\n    return new Promise((resolve, reject) => {\n      if (this.activeTasks < this.maxTasks) {\n        this.activeTasks++;\n        task().finally(() => {\n          if (__privateGet(this, _queue2).length > 0) {\n            __privateGet(this, _queue2).shift()();\n          } else {\n            this.activeTasks--;\n          }\n        }).then(resolve, reject);\n      } else {\n        __privateGet(this, _queue2).push(() => {\n          task().finally(() => {\n            if (__privateGet(this, _queue2).length > 0) {\n              __privateGet(this, _queue2).shift()();\n            } else {\n              this.activeTasks--;\n            }\n          }).then(resolve, reject);\n        });\n      }\n    });\n  }\n}\n_queue2 = new WeakMap();\nexport {\n  ParallelQueue,\n  SerialQueue\n};\n\n", "var __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar _queue, _signer, _cache, _defaultGasBudget, _cacheGasCoin, _buildTransaction;\nimport { toBase64 } from \"@mysten/bcs\";\nimport { isTransaction, Transaction } from \"../Transaction.js\";\nimport { CachingTransactionExecutor } from \"./caching.js\";\nimport { SerialQueue } from \"./queue.js\";\nclass SerialTransactionExecutor {\n  constructor({\n    signer,\n    defaultGasBudget = 50000000n,\n    ...options\n  }) {\n    __privateAdd(this, _queue, new SerialQueue());\n    __privateAdd(this, _signer);\n    __privateAdd(this, _cache);\n    __privateAdd(this, _defaultGasBudget);\n    __privateAdd(this, _cacheGasCoin, async (effects) => {\n      if (!effects.V2) {\n        return;\n      }\n      const gasCoin = getGasCoinFromEffects(effects).ref;\n      if (gasCoin) {\n        __privateGet(this, _cache).cache.setCustom(\"gasCoin\", gasCoin);\n      } else {\n        __privateGet(this, _cache).cache.deleteCustom(\"gasCoin\");\n      }\n    });\n    __privateAdd(this, _buildTransaction, async (transaction) => {\n      const gasCoin = await __privateGet(this, _cache).cache.getCustom(\"gasCoin\");\n      const copy = Transaction.from(transaction);\n      if (gasCoin) {\n        copy.setGasPayment([gasCoin]);\n      }\n      copy.setGasBudgetIfNotSet(__privateGet(this, _defaultGasBudget));\n      copy.setSenderIfNotSet(__privateGet(this, _signer).toSuiAddress());\n      return __privateGet(this, _cache).buildTransaction({ transaction: copy });\n    });\n    __privateSet(this, _signer, signer);\n    __privateSet(this, _defaultGasBudget, defaultGasBudget);\n    __privateSet(this, _cache, new CachingTransactionExecutor({\n      client: options.client,\n      cache: options.cache,\n      onEffects: (effects) => __privateGet(this, _cacheGasCoin).call(this, effects)\n    }));\n  }\n  async applyEffects(effects) {\n    return __privateGet(this, _cache).applyEffects(effects);\n  }\n  async buildTransaction(transaction) {\n    return __privateGet(this, _queue).runTask(() => __privateGet(this, _buildTransaction).call(this, transaction));\n  }\n  resetCache() {\n    return __privateGet(this, _cache).reset();\n  }\n  waitForLastTransaction() {\n    return __privateGet(this, _cache).waitForLastTransaction();\n  }\n  executeTransaction(transaction, options, additionalSignatures = []) {\n    return __privateGet(this, _queue).runTask(async () => {\n      const bytes = isTransaction(transaction) ? await __privateGet(this, _buildTransaction).call(this, transaction) : transaction;\n      const { signature } = await __privateGet(this, _signer).signTransaction(bytes);\n      const results = await __privateGet(this, _cache).executeTransaction({\n        signature: [signature, ...additionalSignatures],\n        transaction: bytes,\n        options\n      }).catch(async (error) => {\n        await this.resetCache();\n        throw error;\n      });\n      const effectsBytes = Uint8Array.from(results.rawEffects);\n      return {\n        digest: results.digest,\n        effects: toBase64(effectsBytes),\n        data: results\n      };\n    });\n  }\n}\n_queue = new WeakMap();\n_signer = new WeakMap();\n_cache = new WeakMap();\n_defaultGasBudget = new WeakMap();\n_cacheGasCoin = new WeakMap();\n_buildTransaction = new WeakMap();\nfunction getGasCoinFromEffects(effects) {\n  if (!effects.V2) {\n    throw new Error(\"Unexpected effects version\");\n  }\n  const gasObjectChange = effects.V2.changedObjects[effects.V2.gasObjectIndex];\n  if (!gasObjectChange) {\n    throw new Error(\"Gas object not found in effects\");\n  }\n  const [objectId, { outputState }] = gasObjectChange;\n  if (!outputState.ObjectWrite) {\n    throw new Error(\"Unexpected gas object state\");\n  }\n  const [digest, owner] = outputState.ObjectWrite;\n  return {\n    ref: {\n      objectId,\n      digest,\n      version: effects.V2.lamportVersion\n    },\n    owner: owner.AddressOwner || owner.ObjectOwner\n  };\n}\nexport {\n  SerialTransactionExecutor,\n  getGasCoinFromEffects\n};\n\n", "var __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar __privateMethod = (obj, member, method) => (__accessCheck(obj, member, \"access private method\"), method);\nvar __privateWrapper = (obj, member, setter, getter) => ({\n  set _(value) {\n    __privateSet(obj, member, value, setter);\n  },\n  get _() {\n    return __privateGet(obj, member, getter);\n  }\n});\nvar _signer, _client, _coinBatchSize, _initialCoinBalance, _minimumCoinBalance, _epochBoundaryWindow, _defaultGasBudget, _maxPoolSize, _sourceCoins, _coinPool, _cache, _objectIdQueues, _buildQueue, _executeQueue, _lastDigest, _cacheLock, _pendingTransactions, _gasPrice, _ParallelTransactionExecutor_instances, getUsedObjects_fn, execute_fn, updateCache_fn, waitForLastDigest_fn, getGasCoin_fn, getGasPrice_fn, refillCoinPool_fn;\nimport { toBase64 } from \"@mysten/bcs\";\nimport { promiseWithResolvers } from \"@mysten/utils\";\nimport { bcs } from \"../../bcs/index.js\";\nimport { Transaction } from \"../Transaction.js\";\nimport { TransactionDataBuilder } from \"../TransactionData.js\";\nimport { CachingTransactionExecutor } from \"./caching.js\";\nimport { ParallelQueue, SerialQueue } from \"./queue.js\";\nimport { getGasCoinFromEffects } from \"./serial.js\";\nconst PARALLEL_EXECUTOR_DEFAULTS = {\n  coinBatchSize: 20,\n  initialCoinBalance: 200000000n,\n  minimumCoinBalance: 50000000n,\n  maxPoolSize: 50,\n  epochBoundaryWindow: 1e3\n};\nclass ParallelTransactionExecutor {\n  constructor(options) {\n    __privateAdd(this, _ParallelTransactionExecutor_instances);\n    __privateAdd(this, _signer);\n    __privateAdd(this, _client);\n    __privateAdd(this, _coinBatchSize);\n    __privateAdd(this, _initialCoinBalance);\n    __privateAdd(this, _minimumCoinBalance);\n    __privateAdd(this, _epochBoundaryWindow);\n    __privateAdd(this, _defaultGasBudget);\n    __privateAdd(this, _maxPoolSize);\n    __privateAdd(this, _sourceCoins);\n    __privateAdd(this, _coinPool, []);\n    __privateAdd(this, _cache);\n    __privateAdd(this, _objectIdQueues, /* @__PURE__ */ new Map());\n    __privateAdd(this, _buildQueue, new SerialQueue());\n    __privateAdd(this, _executeQueue);\n    __privateAdd(this, _lastDigest, null);\n    __privateAdd(this, _cacheLock, null);\n    __privateAdd(this, _pendingTransactions, 0);\n    __privateAdd(this, _gasPrice, null);\n    __privateSet(this, _signer, options.signer);\n    __privateSet(this, _client, options.client);\n    __privateSet(this, _coinBatchSize, options.coinBatchSize ?? PARALLEL_EXECUTOR_DEFAULTS.coinBatchSize);\n    __privateSet(this, _initialCoinBalance, options.initialCoinBalance ?? PARALLEL_EXECUTOR_DEFAULTS.initialCoinBalance);\n    __privateSet(this, _minimumCoinBalance, options.minimumCoinBalance ?? PARALLEL_EXECUTOR_DEFAULTS.minimumCoinBalance);\n    __privateSet(this, _defaultGasBudget, options.defaultGasBudget ?? __privateGet(this, _minimumCoinBalance));\n    __privateSet(this, _epochBoundaryWindow, options.epochBoundaryWindow ?? PARALLEL_EXECUTOR_DEFAULTS.epochBoundaryWindow);\n    __privateSet(this, _maxPoolSize, options.maxPoolSize ?? PARALLEL_EXECUTOR_DEFAULTS.maxPoolSize);\n    __privateSet(this, _cache, new CachingTransactionExecutor({\n      client: options.client,\n      cache: options.cache\n    }));\n    __privateSet(this, _executeQueue, new ParallelQueue(__privateGet(this, _maxPoolSize)));\n    __privateSet(this, _sourceCoins, options.sourceCoins ? new Map(options.sourceCoins.map((id) => [id, null])) : null);\n  }\n  resetCache() {\n    __privateSet(this, _gasPrice, null);\n    return __privateMethod(this, _ParallelTransactionExecutor_instances, updateCache_fn).call(this, () => __privateGet(this, _cache).reset());\n  }\n  async waitForLastTransaction() {\n    await __privateMethod(this, _ParallelTransactionExecutor_instances, updateCache_fn).call(this, () => __privateMethod(this, _ParallelTransactionExecutor_instances, waitForLastDigest_fn).call(this));\n  }\n  async executeTransaction(transaction, options, additionalSignatures = []) {\n    const { promise, resolve, reject } = promiseWithResolvers();\n    const usedObjects = await __privateMethod(this, _ParallelTransactionExecutor_instances, getUsedObjects_fn).call(this, transaction);\n    const execute = () => {\n      __privateGet(this, _executeQueue).runTask(() => {\n        const promise2 = __privateMethod(this, _ParallelTransactionExecutor_instances, execute_fn).call(this, transaction, usedObjects, options, additionalSignatures);\n        return promise2.then(resolve, reject);\n      });\n    };\n    const conflicts = /* @__PURE__ */ new Set();\n    usedObjects.forEach((objectId) => {\n      const queue = __privateGet(this, _objectIdQueues).get(objectId);\n      if (queue) {\n        conflicts.add(objectId);\n        __privateGet(this, _objectIdQueues).get(objectId).push(() => {\n          conflicts.delete(objectId);\n          if (conflicts.size === 0) {\n            execute();\n          }\n        });\n      } else {\n        __privateGet(this, _objectIdQueues).set(objectId, []);\n      }\n    });\n    if (conflicts.size === 0) {\n      execute();\n    }\n    return promise;\n  }\n}\n_signer = new WeakMap();\n_client = new WeakMap();\n_coinBatchSize = new WeakMap();\n_initialCoinBalance = new WeakMap();\n_minimumCoinBalance = new WeakMap();\n_epochBoundaryWindow = new WeakMap();\n_defaultGasBudget = new WeakMap();\n_maxPoolSize = new WeakMap();\n_sourceCoins = new WeakMap();\n_coinPool = new WeakMap();\n_cache = new WeakMap();\n_objectIdQueues = new WeakMap();\n_buildQueue = new WeakMap();\n_executeQueue = new WeakMap();\n_lastDigest = new WeakMap();\n_cacheLock = new WeakMap();\n_pendingTransactions = new WeakMap();\n_gasPrice = new WeakMap();\n_ParallelTransactionExecutor_instances = new WeakSet();\ngetUsedObjects_fn = async function(transaction) {\n  const usedObjects = /* @__PURE__ */ new Set();\n  let serialized = false;\n  transaction.addSerializationPlugin(async (blockData, _options, next) => {\n    await next();\n    if (serialized) {\n      return;\n    }\n    serialized = true;\n    blockData.inputs.forEach((input) => {\n      if (input.Object?.ImmOrOwnedObject?.objectId) {\n        usedObjects.add(input.Object.ImmOrOwnedObject.objectId);\n      } else if (input.Object?.Receiving?.objectId) {\n        usedObjects.add(input.Object.Receiving.objectId);\n      } else if (input.UnresolvedObject?.objectId && !input.UnresolvedObject.initialSharedVersion) {\n        usedObjects.add(input.UnresolvedObject.objectId);\n      }\n    });\n  });\n  await transaction.prepareForSerialization({ client: __privateGet(this, _client) });\n  return usedObjects;\n};\nexecute_fn = async function(transaction, usedObjects, options, additionalSignatures = []) {\n  let gasCoin;\n  try {\n    transaction.setSenderIfNotSet(__privateGet(this, _signer).toSuiAddress());\n    await __privateGet(this, _buildQueue).runTask(async () => {\n      const data = transaction.getData();\n      if (!data.gasData.price) {\n        transaction.setGasPrice(await __privateMethod(this, _ParallelTransactionExecutor_instances, getGasPrice_fn).call(this));\n      }\n      transaction.setGasBudgetIfNotSet(__privateGet(this, _defaultGasBudget));\n      await __privateMethod(this, _ParallelTransactionExecutor_instances, updateCache_fn).call(this);\n      gasCoin = await __privateMethod(this, _ParallelTransactionExecutor_instances, getGasCoin_fn).call(this);\n      __privateWrapper(this, _pendingTransactions)._++;\n      transaction.setGasPayment([\n        {\n          objectId: gasCoin.id,\n          version: gasCoin.version,\n          digest: gasCoin.digest\n        }\n      ]);\n      await __privateGet(this, _cache).buildTransaction({ transaction, onlyTransactionKind: true });\n    });\n    const bytes = await transaction.build({ client: __privateGet(this, _client) });\n    const { signature } = await __privateGet(this, _signer).signTransaction(bytes);\n    const results = await __privateGet(this, _cache).executeTransaction({\n      transaction: bytes,\n      signature: [signature, ...additionalSignatures],\n      options: {\n        ...options,\n        showEffects: true\n      }\n    });\n    const effectsBytes = Uint8Array.from(results.rawEffects);\n    const effects = bcs.TransactionEffects.parse(effectsBytes);\n    const gasResult = getGasCoinFromEffects(effects);\n    const gasUsed = effects.V2?.gasUsed;\n    if (gasCoin && gasUsed && gasResult.owner === __privateGet(this, _signer).toSuiAddress()) {\n      const totalUsed = BigInt(gasUsed.computationCost) + BigInt(gasUsed.storageCost) + BigInt(gasUsed.storageCost) - BigInt(gasUsed.storageRebate);\n      const remainingBalance = gasCoin.balance - totalUsed;\n      let usesGasCoin = false;\n      new TransactionDataBuilder(transaction.getData()).mapArguments((arg) => {\n        if (arg.$kind === \"GasCoin\") {\n          usesGasCoin = true;\n        }\n        return arg;\n      });\n      if (!usesGasCoin && remainingBalance >= __privateGet(this, _minimumCoinBalance)) {\n        __privateGet(this, _coinPool).push({\n          id: gasResult.ref.objectId,\n          version: gasResult.ref.version,\n          digest: gasResult.ref.digest,\n          balance: remainingBalance\n        });\n      } else {\n        if (!__privateGet(this, _sourceCoins)) {\n          __privateSet(this, _sourceCoins, /* @__PURE__ */ new Map());\n        }\n        __privateGet(this, _sourceCoins).set(gasResult.ref.objectId, gasResult.ref);\n      }\n    }\n    __privateSet(this, _lastDigest, results.digest);\n    return {\n      digest: results.digest,\n      effects: toBase64(effectsBytes),\n      data: results\n    };\n  } catch (error) {\n    if (gasCoin) {\n      if (!__privateGet(this, _sourceCoins)) {\n        __privateSet(this, _sourceCoins, /* @__PURE__ */ new Map());\n      }\n      __privateGet(this, _sourceCoins).set(gasCoin.id, null);\n    }\n    await __privateMethod(this, _ParallelTransactionExecutor_instances, updateCache_fn).call(this, async () => {\n      await Promise.all([\n        __privateGet(this, _cache).cache.deleteObjects([...usedObjects]),\n        __privateMethod(this, _ParallelTransactionExecutor_instances, waitForLastDigest_fn).call(this)\n      ]);\n    });\n    throw error;\n  } finally {\n    usedObjects.forEach((objectId) => {\n      const queue = __privateGet(this, _objectIdQueues).get(objectId);\n      if (queue && queue.length > 0) {\n        queue.shift()();\n      } else if (queue) {\n        __privateGet(this, _objectIdQueues).delete(objectId);\n      }\n    });\n    __privateWrapper(this, _pendingTransactions)._--;\n  }\n};\nupdateCache_fn = async function(fn) {\n  if (__privateGet(this, _cacheLock)) {\n    await __privateGet(this, _cacheLock);\n  }\n  __privateSet(this, _cacheLock, fn?.().then(\n    () => {\n      __privateSet(this, _cacheLock, null);\n    },\n    () => {\n    }\n  ) ?? null);\n};\nwaitForLastDigest_fn = async function() {\n  const digest = __privateGet(this, _lastDigest);\n  if (digest) {\n    __privateSet(this, _lastDigest, null);\n    await __privateGet(this, _client).waitForTransaction({ digest });\n  }\n};\ngetGasCoin_fn = async function() {\n  if (__privateGet(this, _coinPool).length === 0 && __privateGet(this, _pendingTransactions) <= __privateGet(this, _maxPoolSize)) {\n    await __privateMethod(this, _ParallelTransactionExecutor_instances, refillCoinPool_fn).call(this);\n  }\n  if (__privateGet(this, _coinPool).length === 0) {\n    throw new Error(\"No coins available\");\n  }\n  const coin = __privateGet(this, _coinPool).shift();\n  return coin;\n};\ngetGasPrice_fn = async function() {\n  const remaining = __privateGet(this, _gasPrice) ? __privateGet(this, _gasPrice).expiration - __privateGet(this, _epochBoundaryWindow) - Date.now() : 0;\n  if (remaining > 0) {\n    return __privateGet(this, _gasPrice).price;\n  }\n  if (__privateGet(this, _gasPrice)) {\n    const timeToNextEpoch = Math.max(\n      __privateGet(this, _gasPrice).expiration + __privateGet(this, _epochBoundaryWindow) - Date.now(),\n      1e3\n    );\n    await new Promise((resolve) => setTimeout(resolve, timeToNextEpoch));\n  }\n  const state = await __privateGet(this, _client).getLatestSuiSystemState();\n  __privateSet(this, _gasPrice, {\n    price: BigInt(state.referenceGasPrice),\n    expiration: Number.parseInt(state.epochStartTimestampMs, 10) + Number.parseInt(state.epochDurationMs, 10)\n  });\n  return __privateMethod(this, _ParallelTransactionExecutor_instances, getGasPrice_fn).call(this);\n};\nrefillCoinPool_fn = async function() {\n  const batchSize = Math.min(\n    __privateGet(this, _coinBatchSize),\n    __privateGet(this, _maxPoolSize) - (__privateGet(this, _coinPool).length + __privateGet(this, _pendingTransactions)) + 1\n  );\n  if (batchSize === 0) {\n    return;\n  }\n  const txb = new Transaction();\n  const address = __privateGet(this, _signer).toSuiAddress();\n  txb.setSender(address);\n  if (__privateGet(this, _sourceCoins)) {\n    const refs = [];\n    const ids = [];\n    for (const [id, ref] of __privateGet(this, _sourceCoins)) {\n      if (ref) {\n        refs.push(ref);\n      } else {\n        ids.push(id);\n      }\n    }\n    if (ids.length > 0) {\n      const coins = await __privateGet(this, _client).multiGetObjects({\n        ids\n      });\n      refs.push(\n        ...coins.filter((coin) => coin.data !== null).map(({ data }) => ({\n          objectId: data.objectId,\n          version: data.version,\n          digest: data.digest\n        }))\n      );\n    }\n    txb.setGasPayment(refs);\n    __privateSet(this, _sourceCoins, /* @__PURE__ */ new Map());\n  }\n  const amounts = new Array(batchSize).fill(__privateGet(this, _initialCoinBalance));\n  const results = txb.splitCoins(txb.gas, amounts);\n  const coinResults = [];\n  for (let i = 0; i < amounts.length; i++) {\n    coinResults.push(results[i]);\n  }\n  txb.transferObjects(coinResults, address);\n  await this.waitForLastTransaction();\n  const result = await __privateGet(this, _client).signAndExecuteTransaction({\n    transaction: txb,\n    signer: __privateGet(this, _signer),\n    options: {\n      showRawEffects: true\n    }\n  });\n  const effects = bcs.TransactionEffects.parse(Uint8Array.from(result.rawEffects));\n  effects.V2?.changedObjects.forEach(([id, { outputState }], i) => {\n    if (i === effects.V2?.gasObjectIndex || !outputState.ObjectWrite) {\n      return;\n    }\n    __privateGet(this, _coinPool).push({\n      id,\n      version: effects.V2.lamportVersion,\n      digest: outputState.ObjectWrite[0],\n      balance: BigInt(__privateGet(this, _initialCoinBalance))\n    });\n  });\n  if (!__privateGet(this, _sourceCoins)) {\n    __privateSet(this, _sourceCoins, /* @__PURE__ */ new Map());\n  }\n  const gasObject = getGasCoinFromEffects(effects).ref;\n  __privateGet(this, _sourceCoins).set(gasObject.objectId, gasObject);\n  await __privateGet(this, _client).waitForTransaction({ digest: result.digest });\n};\nexport {\n  ParallelTransactionExecutor\n};\n\n", "import { bigint, object, parse, string } from \"valibot\";\nimport { bcs } from \"../../bcs/index.js\";\nimport { normalizeStructTag } from \"../../utils/sui-types.js\";\nimport { Commands } from \"../Commands.js\";\nimport { Inputs } from \"../Inputs.js\";\nimport { getClient } from \"../resolve.js\";\nconst COIN_WITH_BALANCE = \"CoinWithBalance\";\nconst SUI_TYPE = normalizeStructTag(\"0x2::sui::SUI\");\nfunction coinWithBalance({\n  type = SUI_TYPE,\n  balance,\n  useGasCoin = true\n}) {\n  let coinResult = null;\n  return (tx) => {\n    if (coinResult) {\n      return coinResult;\n    }\n    tx.addIntentResolver(COIN_WITH_BALANCE, resolveCoinBalance);\n    const coinType = type === \"gas\" ? type : normalizeStructTag(type);\n    coinResult = tx.add(\n      Commands.Intent({\n        name: COIN_WITH_BALANCE,\n        inputs: {},\n        data: {\n          type: coinType === SUI_TYPE && useGasCoin ? \"gas\" : coinType,\n          balance: BigInt(balance)\n        }\n      })\n    );\n    return coinResult;\n  };\n}\nconst CoinWithBalanceData = object({\n  type: string(),\n  balance: bigint()\n});\nasync function resolveCoinBalance(transactionData, buildOptions, next) {\n  const coinTypes = /* @__PURE__ */ new Set();\n  const totalByType = /* @__PURE__ */ new Map();\n  if (!transactionData.sender) {\n    throw new Error(\"Sender must be set to resolve CoinWithBalance\");\n  }\n  for (const command of transactionData.commands) {\n    if (command.$kind === \"$Intent\" && command.$Intent.name === COIN_WITH_BALANCE) {\n      const { type, balance } = parse(CoinWithBalanceData, command.$Intent.data);\n      if (type !== \"gas\" && balance > 0n) {\n        coinTypes.add(type);\n      }\n      totalByType.set(type, (totalByType.get(type) ?? 0n) + balance);\n    }\n  }\n  const usedIds = /* @__PURE__ */ new Set();\n  for (const input of transactionData.inputs) {\n    if (input.Object?.ImmOrOwnedObject) {\n      usedIds.add(input.Object.ImmOrOwnedObject.objectId);\n    }\n    if (input.UnresolvedObject?.objectId) {\n      usedIds.add(input.UnresolvedObject.objectId);\n    }\n  }\n  const coinsByType = /* @__PURE__ */ new Map();\n  const client = getSuiClient(buildOptions);\n  await Promise.all(\n    [...coinTypes].map(async (coinType) => {\n      coinsByType.set(\n        coinType,\n        await getCoinsOfType({\n          coinType,\n          balance: totalByType.get(coinType),\n          client,\n          owner: transactionData.sender,\n          usedIds\n        })\n      );\n    })\n  );\n  const mergedCoins = /* @__PURE__ */ new Map();\n  mergedCoins.set(\"gas\", { $kind: \"GasCoin\", GasCoin: true });\n  for (const [index, transaction] of transactionData.commands.entries()) {\n    if (transaction.$kind !== \"$Intent\" || transaction.$Intent.name !== COIN_WITH_BALANCE) {\n      continue;\n    }\n    const { type, balance } = transaction.$Intent.data;\n    if (balance === 0n && type !== \"gas\") {\n      transactionData.replaceCommand(\n        index,\n        Commands.MoveCall({ target: \"0x2::coin::zero\", typeArguments: [type] })\n      );\n      continue;\n    }\n    const commands = [];\n    if (!mergedCoins.has(type)) {\n      const [first, ...rest] = coinsByType.get(type).map(\n        (coin) => transactionData.addInput(\n          \"object\",\n          Inputs.ObjectRef({\n            objectId: coin.coinObjectId,\n            digest: coin.digest,\n            version: coin.version\n          })\n        )\n      );\n      if (rest.length > 0) {\n        commands.push(Commands.MergeCoins(first, rest));\n      }\n      mergedCoins.set(type, first);\n    }\n    commands.push(\n      Commands.SplitCoins(mergedCoins.get(type), [\n        transactionData.addInput(\"pure\", Inputs.Pure(bcs.u64().serialize(balance)))\n      ])\n    );\n    transactionData.replaceCommand(index, commands);\n    transactionData.mapArguments((arg) => {\n      if (arg.$kind === \"Result\" && arg.Result === index) {\n        return {\n          $kind: \"NestedResult\",\n          NestedResult: [index + commands.length - 1, 0]\n        };\n      }\n      return arg;\n    });\n  }\n  return next();\n}\nasync function getCoinsOfType({\n  coinType,\n  balance,\n  client,\n  owner,\n  usedIds\n}) {\n  let remainingBalance = balance;\n  const coins = [];\n  return loadMoreCoins();\n  async function loadMoreCoins(cursor = null) {\n    const { data, hasNextPage, nextCursor } = await client.getCoins({ owner, coinType, cursor });\n    const sortedCoins = data.sort((a, b) => Number(BigInt(b.balance) - BigInt(a.balance)));\n    for (const coin of sortedCoins) {\n      if (usedIds.has(coin.coinObjectId)) {\n        continue;\n      }\n      const coinBalance = BigInt(coin.balance);\n      coins.push(coin);\n      remainingBalance -= coinBalance;\n      if (remainingBalance <= 0) {\n        return coins;\n      }\n    }\n    if (hasNextPage) {\n      return loadMoreCoins(nextCursor);\n    }\n    throw new Error(`Not enough coins of type ${coinType} to satisfy requested balance`);\n  }\n}\nfunction getSuiClient(options) {\n  const client = getClient(options);\n  if (!client.jsonRpc) {\n    throw new Error(`CoinWithBalance intent currently only works with SuiClient`);\n  }\n  return client;\n}\nexport {\n  coinWithBalance,\n  getSuiClient\n};\n\n", "import { createObjectMethods } from \"./object.js\";\nimport { createPure } from \"./pure.js\";\nconst Arguments = {\n  pure: createPure((value) => (tx) => tx.pure(value)),\n  object: createObjectMethods((value) => (tx) => tx.object(value)),\n  sharedObjectRef: (...args) => (tx) => tx.sharedObjectRef(...args),\n  objectRef: (...args) => (tx) => tx.objectRef(...args),\n  receivingRef: (...args) => (tx) => tx.receivingRef(...args)\n};\nexport {\n  Arguments\n};\n\n"],
  "mappings": "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",
  "names": ["object", "__typeError", "__accessCheck", "__privateGet", "__privateAdd", "__privateSet", "__typeError", "__accessCheck", "__privateGet", "__privateAdd", "__typeError", "__accessCheck", "__privateGet", "__privateAdd", "__privateSet", "_queue", "_cache", "__typeError", "__accessCheck", "__privateGet", "__privateAdd", "__privateSet", "_signer", "_client", "_defaultGasBudget", "_cache", "_lastDigest"]
}
