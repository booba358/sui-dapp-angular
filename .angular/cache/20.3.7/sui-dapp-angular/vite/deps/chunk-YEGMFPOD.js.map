{
  "version": 3,
  "sources": ["../../../../../../node_modules/@mysten/sui/dist/esm/utils/format.js", "../../../../../../node_modules/@scure/base/lib/esm/index.js", "../../../../../../node_modules/@mysten/utils/dist/esm/b58.js", "../../../../../../node_modules/@mysten/utils/dist/esm/b64.js", "../../../../../../node_modules/@mysten/utils/dist/esm/hex.js", "../../../../../../node_modules/@mysten/utils/dist/esm/chunk.js", "../../../../../../node_modules/@mysten/utils/dist/esm/dataloader.js", "../../../../../../node_modules/@mysten/bcs/dist/esm/uleb.js", "../../../../../../node_modules/@mysten/bcs/dist/esm/reader.js", "../../../../../../node_modules/@mysten/bcs/dist/esm/utils.js", "../../../../../../node_modules/@mysten/bcs/dist/esm/writer.js", "../../../../../../node_modules/@mysten/bcs/dist/esm/bcs-type.js", "../../../../../../node_modules/@mysten/bcs/dist/esm/bcs.js", "../../../../../../node_modules/@mysten/bcs/dist/esm/index.js", "../../../../../../node_modules/@mysten/sui/dist/esm/utils/suins.js", "../../../../../../node_modules/@mysten/sui/dist/esm/utils/move-registry.js", "../../../../../../node_modules/@mysten/sui/dist/esm/utils/sui-types.js", "../../../../../../node_modules/@mysten/sui/dist/esm/utils/constants.js", "../../../../../../node_modules/@noble/hashes/esm/crypto.js", "../../../../../../node_modules/@noble/hashes/esm/utils.js", "../../../../../../node_modules/@noble/hashes/esm/_blake.js", "../../../../../../node_modules/@noble/hashes/esm/_md.js", "../../../../../../node_modules/@noble/hashes/esm/_u64.js", "../../../../../../node_modules/@noble/hashes/esm/blake2.js", "../../../../../../node_modules/@noble/hashes/esm/blake2b.js", "../../../../../../node_modules/@mysten/sui/dist/esm/bcs/type-tag-serializer.js", "../../../../../../node_modules/@mysten/sui/dist/esm/bcs/bcs.js", "../../../../../../node_modules/@mysten/sui/dist/esm/bcs/effects.js", "../../../../../../node_modules/@mysten/sui/dist/esm/bcs/pure.js", "../../../../../../node_modules/@mysten/sui/dist/esm/bcs/index.js", "../../../../../../node_modules/@mysten/sui/dist/esm/utils/dynamic-fields.js", "../../../../../../node_modules/@mysten/sui/dist/esm/utils/derived-objects.js"],
  "sourcesContent": ["const ELLIPSIS = \"\\u2026\";\nfunction formatAddress(address) {\n  if (address.length <= 6) {\n    return address;\n  }\n  const offset = address.startsWith(\"0x\") ? 2 : 0;\n  return `0x${address.slice(offset, offset + 4)}${ELLIPSIS}${address.slice(-4)}`;\n}\nfunction formatDigest(digest) {\n  return `${digest.slice(0, 10)}${ELLIPSIS}`;\n}\nexport {\n  formatAddress,\n  formatDigest\n};\n\n", "/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nfunction isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n/** Asserts something is Uint8Array. */\nfunction abytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\nfunction isArrayOf(isString, arr) {\n    if (!Array.isArray(arr))\n        return false;\n    if (arr.length === 0)\n        return true;\n    if (isString) {\n        return arr.every((item) => typeof item === 'string');\n    }\n    else {\n        return arr.every((item) => Number.isSafeInteger(item));\n    }\n}\n// no abytes: seems to have 10% slowdown. Why?!\nfunction afn(input) {\n    if (typeof input !== 'function')\n        throw new Error('function expected');\n    return true;\n}\nfunction astr(label, input) {\n    if (typeof input !== 'string')\n        throw new Error(`${label}: string expected`);\n    return true;\n}\nfunction anumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`invalid integer: ${n}`);\n}\nfunction aArr(input) {\n    if (!Array.isArray(input))\n        throw new Error('array expected');\n}\nfunction astrArr(label, input) {\n    if (!isArrayOf(true, input))\n        throw new Error(`${label}: array of strings expected`);\n}\nfunction anumArr(label, input) {\n    if (!isArrayOf(false, input))\n        throw new Error(`${label}: array of numbers expected`);\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction chain(...args) {\n    const id = (a) => a;\n    // Wrap call in closure so JIT can inline calls\n    const wrap = (a, b) => (c) => a(b(c));\n    // Construct chain of args[-1].encode(args[-2].encode([...]))\n    const encode = args.map((x) => x.encode).reduceRight(wrap, id);\n    // Construct chain of args[0].decode(args[1].decode(...))\n    const decode = args.map((x) => x.decode).reduce(wrap, id);\n    return { encode, decode };\n}\n/**\n * Encodes integer radix representation to array of strings using alphabet and back.\n * Could also be array of strings.\n * @__NO_SIDE_EFFECTS__\n */\nfunction alphabet(letters) {\n    // mapping 1 to \"b\"\n    const lettersA = typeof letters === 'string' ? letters.split('') : letters;\n    const len = lettersA.length;\n    astrArr('alphabet', lettersA);\n    // mapping \"b\" to 1\n    const indexes = new Map(lettersA.map((l, i) => [l, i]));\n    return {\n        encode: (digits) => {\n            aArr(digits);\n            return digits.map((i) => {\n                if (!Number.isSafeInteger(i) || i < 0 || i >= len)\n                    throw new Error(`alphabet.encode: digit index outside alphabet \"${i}\". Allowed: ${letters}`);\n                return lettersA[i];\n            });\n        },\n        decode: (input) => {\n            aArr(input);\n            return input.map((letter) => {\n                astr('alphabet.decode', letter);\n                const i = indexes.get(letter);\n                if (i === undefined)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${letters}`);\n                return i;\n            });\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction join(separator = '') {\n    astr('join', separator);\n    return {\n        encode: (from) => {\n            astrArr('join.decode', from);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            astr('join.decode', to);\n            return to.split(separator);\n        },\n    };\n}\n/**\n * Pad strings array so it has integer number of bits\n * @__NO_SIDE_EFFECTS__\n */\nfunction padding(bits, chr = '=') {\n    anumber(bits);\n    astr('padding', chr);\n    return {\n        encode(data) {\n            astrArr('padding.encode', data);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            astrArr('padding.decode', input);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('padding: invalid, string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                const last = end - 1;\n                const byte = last * bits;\n                if (byte % 8 === 0)\n                    throw new Error('padding: invalid, string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction normalize(fn) {\n    afn(fn);\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\n/**\n * Slow: O(n^2) time complexity\n */\nfunction convertRadix(data, from, to) {\n    // base 1 is impossible\n    if (from < 2)\n        throw new Error(`convertRadix: invalid from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: invalid to=${to}, base cannot be less than 2`);\n    aArr(data);\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data, (d) => {\n        anumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`invalid integer: ${d}`);\n        return d;\n    });\n    const dlen = digits.length;\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < dlen; i++) {\n            const digit = digits[i];\n            const fromCarry = from * carry;\n            const digitBase = fromCarry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                fromCarry / from !== carry ||\n                digitBase - digit !== fromCarry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            const div = digitBase / to;\n            carry = digitBase % to;\n            const rounded = Math.floor(div);\n            digits[i] = rounded;\n            if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!rounded)\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (b === 0 ? a : gcd(b, a % b));\nconst radix2carry = /* @__NO_SIDE_EFFECTS__ */ (from, to) => from + (to - gcd(from, to));\nconst powers = /* @__PURE__ */ (() => {\n    let res = [];\n    for (let i = 0; i < 40; i++)\n        res.push(2 ** i);\n    return res;\n})();\n/**\n * Implemented with numbers, because BigInt is 5x slower\n */\nfunction convertRadix2(data, from, to, padding) {\n    aArr(data);\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0; // bitwise position in current element\n    const max = powers[from];\n    const mask = powers[to] - 1;\n    const res = [];\n    for (const n of data) {\n        anumber(n);\n        if (n >= max)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        const pow = powers[pos];\n        if (pow === undefined)\n            throw new Error('invalid carry');\n        carry &= pow - 1; // clean carry, otherwise it will cause overflow\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry > 0)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix(num) {\n    anumber(num);\n    const _256 = 2 ** 8;\n    return {\n        encode: (bytes) => {\n            if (!isBytes(bytes))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), _256, num);\n        },\n        decode: (digits) => {\n            anumArr('radix.decode', digits);\n            return Uint8Array.from(convertRadix(digits, num, _256));\n        },\n    };\n}\n/**\n * If both bases are power of same number (like `2**8 <-> 2**64`),\n * there is a linear algorithm. For now we have implementation for power-of-two bases only.\n * @__NO_SIDE_EFFECTS__\n */\nfunction radix2(bits, revPadding = false) {\n    anumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!isBytes(bytes))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            anumArr('radix2.decode', digits);\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    afn(fn);\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    anumber(len);\n    afn(fn);\n    return {\n        encode(data) {\n            if (!isBytes(data))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const sum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(sum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!isBytes(data))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const oldChecksum = data.slice(-len);\n            const newChecksum = fn(payload).slice(0, len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\n// prettier-ignore\nexport const utils = {\n    alphabet, chain, checksum, convertRadix, convertRadix2, radix, radix2, join, padding,\n};\n// RFC 4648 aka RFC 3548\n// ---------------------\n/**\n * base16 encoding from RFC 4648.\n * @example\n * ```js\n * base16.encode(Uint8Array.from([0x12, 0xab]));\n * // => '12AB'\n * ```\n */\nexport const base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\n/**\n * base32 encoding from RFC 4648. Has padding.\n * Use `base32nopad` for unpadded version.\n * Also check out `base32hex`, `base32hexnopad`, `base32crockford`.\n * @example\n * ```js\n * base32.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'CKVQ===='\n * base32.decode('CKVQ====');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\n/**\n * base32 encoding from RFC 4648. No padding.\n * Use `base32` for padded version.\n * Also check out `base32hex`, `base32hexnopad`, `base32crockford`.\n * @example\n * ```js\n * base32nopad.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'CKVQ'\n * base32nopad.decode('CKVQ');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base32nopad = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), join(''));\n/**\n * base32 encoding from RFC 4648. Padded. Compared to ordinary `base32`, slightly different alphabet.\n * Use `base32hexnopad` for unpadded version.\n * @example\n * ```js\n * base32hex.encode(Uint8Array.from([0x12, 0xab]));\n * // => '2ALG===='\n * base32hex.decode('2ALG====');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\n/**\n * base32 encoding from RFC 4648. No padding. Compared to ordinary `base32`, slightly different alphabet.\n * Use `base32hex` for padded version.\n * @example\n * ```js\n * base32hexnopad.encode(Uint8Array.from([0x12, 0xab]));\n * // => '2ALG'\n * base32hexnopad.decode('2ALG');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base32hexnopad = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), join(''));\n/**\n * base32 encoding from RFC 4648. Doug Crockford's version.\n * https://www.crockford.com/base32.html\n * @example\n * ```js\n * base32crockford.encode(Uint8Array.from([0x12, 0xab]));\n * // => '2ANG'\n * base32crockford.decode('2ANG');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\n// Built-in base64 conversion https://caniuse.com/mdn-javascript_builtins_uint8array_frombase64\n// prettier-ignore\nconst hasBase64Builtin = /* @__PURE__ */ (() => typeof Uint8Array.from([]).toBase64 === 'function' &&\n    typeof Uint8Array.fromBase64 === 'function')();\nconst decodeBase64Builtin = (s, isUrl) => {\n    astr('base64', s);\n    const re = isUrl ? /^[A-Za-z0-9=_-]+$/ : /^[A-Za-z0-9=+/]+$/;\n    const alphabet = isUrl ? 'base64url' : 'base64';\n    if (s.length > 0 && !re.test(s))\n        throw new Error('invalid base64');\n    return Uint8Array.fromBase64(s, { alphabet, lastChunkHandling: 'strict' });\n};\n/**\n * base64 from RFC 4648. Padded.\n * Use `base64nopad` for unpadded version.\n * Also check out `base64url`, `base64urlnopad`.\n * Falls back to built-in function, when available.\n * @example\n * ```js\n * base64.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'Eqs='\n * base64.decode('Eqs=');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\n// prettier-ignore\nexport const base64 = hasBase64Builtin ? {\n    encode(b) { abytes(b); return b.toBase64(); },\n    decode(s) { return decodeBase64Builtin(s, false); },\n} : chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\n/**\n * base64 from RFC 4648. No padding.\n * Use `base64` for padded version.\n * @example\n * ```js\n * base64nopad.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'Eqs'\n * base64nopad.decode('Eqs');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base64nopad = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), join(''));\n/**\n * base64 from RFC 4648, using URL-safe alphabet. Padded.\n * Use `base64urlnopad` for unpadded version.\n * Falls back to built-in function, when available.\n * @example\n * ```js\n * base64url.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'Eqs='\n * base64url.decode('Eqs=');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\n// prettier-ignore\nexport const base64url = hasBase64Builtin ? {\n    encode(b) { abytes(b); return b.toBase64({ alphabet: 'base64url' }); },\n    decode(s) { return decodeBase64Builtin(s, true); },\n} : chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\n/**\n * base64 from RFC 4648, using URL-safe alphabet. No padding.\n * Use `base64url` for padded version.\n * @example\n * ```js\n * base64urlnopad.encode(Uint8Array.from([0x12, 0xab]));\n * // => 'Eqs'\n * base64urlnopad.decode('Eqs');\n * // => Uint8Array.from([0x12, 0xab])\n * ```\n */\nexport const base64urlnopad = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), join(''));\n// base58 code\n// -----------\nconst genBase58 = /* @__NO_SIDE_EFFECTS__ */ (abc) => chain(radix(58), alphabet(abc), join(''));\n/**\n * base58: base64 without ambigous characters +, /, 0, O, I, l.\n * Quadratic (O(n^2)) - so, can't be used on large inputs.\n * @example\n * ```js\n * base58.decode('01abcdef');\n * // => '3UhJW'\n * ```\n */\nexport const base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\n/**\n * base58: flickr version. Check out `base58`.\n */\nexport const base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\n/**\n * base58: XRP version. Check out `base58`.\n */\nexport const base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\n// Data len (index) -> encoded block len\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\n/**\n * base58: XMR version. Check out `base58`.\n * Done in 8-byte blocks (which equals 11 chars in decoding). Last (non-full) block padded with '1' to size in XMR_BLOCK_LEN.\n * Block encoding significantly reduces quadratic complexity of base58.\n */\nexport const base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\n/**\n * Method, which creates base58check encoder.\n * Requires function, calculating sha256.\n */\nexport const createBase58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\n/**\n * Use `createBase58check` instead.\n * @deprecated\n */\nexport const base58check = createBase58check;\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % powers[30]], 30, 5, false));\n}\n/**\n * @__NO_SIDE_EFFECTS__\n */\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        astr('bech32.encode prefix', prefix);\n        if (isBytes(words))\n            words = Array.from(words);\n        anumArr('bech32.encode', words);\n        const plen = prefix.length;\n        if (plen === 0)\n            throw new TypeError(`Invalid prefix length ${plen}`);\n        const actualLength = plen + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        const lowered = prefix.toLowerCase();\n        const sum = bechChecksum(lowered, words, ENCODING_CONST);\n        return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;\n    }\n    function decode(str, limit = 90) {\n        astr('bech32.decode input', str);\n        const slen = str.length;\n        if (slen < 8 || (limit !== false && slen > limit))\n            throw new TypeError(`invalid string length: ${slen} (${str}). Expected (8..${limit})`);\n        // don't allow mixed case\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        const sepIndex = lowered.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = lowered.slice(0, sepIndex);\n        const data = lowered.slice(sepIndex + 1);\n        if (data.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(data).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!data.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    function encodeFromBytes(prefix, bytes) {\n        return encode(prefix, toWords(bytes));\n    }\n    return {\n        encode,\n        decode,\n        encodeFromBytes,\n        decodeToBytes,\n        decodeUnsafe,\n        fromWords,\n        fromWordsUnsafe,\n        toWords,\n    };\n}\n/**\n * bech32 from BIP 173. Operates on words.\n * For high-level, check out scure-btc-signer:\n * https://github.com/paulmillr/scure-btc-signer.\n */\nexport const bech32 = genBech32('bech32');\n/**\n * bech32m from BIP 350. Operates on words.\n * It was to mitigate `bech32` weaknesses.\n * For high-level, check out scure-btc-signer:\n * https://github.com/paulmillr/scure-btc-signer.\n */\nexport const bech32m = genBech32('bech32m');\n/**\n * UTF-8-to-byte decoder. Uses built-in TextDecoder / TextEncoder.\n * @example\n * ```js\n * const b = utf8.decode(\"hey\"); // => new Uint8Array([ 104, 101, 121 ])\n * const str = utf8.encode(b); // \"hey\"\n * ```\n */\nexport const utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\n// prettier-ignore\nconst hasHexBuiltin = /* @__PURE__ */ (() => typeof Uint8Array.from([]).toHex === 'function' &&\n    typeof Uint8Array.fromHex === 'function')();\n// prettier-ignore\nconst hexBuiltin = {\n    encode(data) { abytes(data); return data.toHex(); },\n    decode(s) { astr('hex', s); return Uint8Array.fromHex(s); },\n};\n/**\n * hex string decoder. Uses built-in function, when available.\n * @example\n * ```js\n * const b = hex.decode(\"0102ff\"); // => new Uint8Array([ 1, 2, 255 ])\n * const str = hex.encode(b); // \"0102ff\"\n * ```\n */\nexport const hex = hasHexBuiltin\n    ? hexBuiltin\n    : chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n        if (typeof s !== 'string' || s.length % 2 !== 0)\n            throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n        return s.toLowerCase();\n    }));\n// prettier-ignore\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = 'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';\n/** @deprecated */\nexport const bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!isBytes(bytes))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\n/** @deprecated */\nexport const str = bytesToString; // as in python, but for bytes only\n/** @deprecated */\nexport const stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\n/** @deprecated */\nexport const bytes = stringToBytes;\n", "import { base58 } from \"@scure/base\";\nconst toBase58 = (buffer) => base58.encode(buffer);\nconst fromBase58 = (str) => base58.decode(str);\nexport {\n  fromBase58,\n  toBase58\n};\n\n", "function fromBase64(base64String) {\n  return Uint8Array.from(atob(base64String), (char) => char.charCodeAt(0));\n}\nconst CHUNK_SIZE = 8192;\nfunction toBase64(bytes) {\n  if (bytes.length < CHUNK_SIZE) {\n    return btoa(String.fromCharCode(...bytes));\n  }\n  let output = \"\";\n  for (var i = 0; i < bytes.length; i += CHUNK_SIZE) {\n    const chunk = bytes.slice(i, i + CHUNK_SIZE);\n    output += String.fromCharCode(...chunk);\n  }\n  return btoa(output);\n}\nexport {\n  fromBase64,\n  toBase64\n};\n\n", "function fromHex(hexStr) {\n  const normalized = hexStr.startsWith(\"0x\") ? hexStr.slice(2) : hexStr;\n  const padded = normalized.length % 2 === 0 ? normalized : `0${normalized}`;\n  const intArr = padded.match(/[0-9a-fA-F]{2}/g)?.map((byte) => parseInt(byte, 16)) ?? [];\n  if (intArr.length !== padded.length / 2) {\n    throw new Error(`Invalid hex string ${hexStr}`);\n  }\n  return Uint8Array.from(intArr);\n}\nfunction toHex(bytes) {\n  return bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, \"0\"), \"\");\n}\nexport {\n  fromHex,\n  toHex\n};\n\n", "function chunk(array, size) {\n  return Array.from({ length: Math.ceil(array.length / size) }, (_, i) => {\n    return array.slice(i * size, (i + 1) * size);\n  });\n}\nexport {\n  chunk\n};\n\n", "class DataLoader {\n  constructor(batchLoadFn, options) {\n    if (typeof batchLoadFn !== \"function\") {\n      throw new TypeError(\n        `DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but got: ${batchLoadFn}.`\n      );\n    }\n    this._batchLoadFn = batchLoadFn;\n    this._maxBatchSize = getValidMaxBatchSize(options);\n    this._batchScheduleFn = getValidBatchScheduleFn(options);\n    this._cacheKeyFn = getValidCacheKeyFn(options);\n    this._cacheMap = getValidCacheMap(options);\n    this._batch = null;\n    this.name = getValidName(options);\n  }\n  /**\n   * Loads a key, returning a `Promise` for the value represented by that key.\n   */\n  load(key) {\n    if (key === null || key === void 0) {\n      throw new TypeError(\n        `The loader.load() function must be called with a value, but got: ${String(key)}.`\n      );\n    }\n    const batch = getCurrentBatch(this);\n    const cacheMap = this._cacheMap;\n    let cacheKey;\n    if (cacheMap) {\n      cacheKey = this._cacheKeyFn(key);\n      const cachedPromise = cacheMap.get(cacheKey);\n      if (cachedPromise) {\n        const cacheHits = batch.cacheHits || (batch.cacheHits = []);\n        return new Promise((resolve) => {\n          cacheHits.push(() => {\n            resolve(cachedPromise);\n          });\n        });\n      }\n    }\n    batch.keys.push(key);\n    const promise = new Promise((resolve, reject) => {\n      batch.callbacks.push({ resolve, reject });\n    });\n    if (cacheMap) {\n      cacheMap.set(cacheKey, promise);\n    }\n    return promise;\n  }\n  /**\n   * Loads multiple keys, promising an array of values:\n   *\n   *     var [ a, b ] = await myLoader.loadMany([ 'a', 'b' ]);\n   *\n   * This is similar to the more verbose:\n   *\n   *     var [ a, b ] = await Promise.all([\n   *       myLoader.load('a'),\n   *       myLoader.load('b')\n   *     ]);\n   *\n   * However it is different in the case where any load fails. Where\n   * Promise.all() would reject, loadMany() always resolves, however each result\n   * is either a value or an Error instance.\n   *\n   *     var [ a, b, c ] = await myLoader.loadMany([ 'a', 'b', 'badkey' ]);\n   *     // c instanceof Error\n   *\n   */\n  loadMany(keys) {\n    if (!isArrayLike(keys)) {\n      throw new TypeError(\n        `The loader.loadMany() function must be called with Array<key>, but got: ${keys}.`\n      );\n    }\n    const loadPromises = [];\n    for (let i = 0; i < keys.length; i++) {\n      loadPromises.push(this.load(keys[i]).catch((error) => error));\n    }\n    return Promise.all(loadPromises);\n  }\n  /**\n   * Clears the value at `key` from the cache, if it exists. Returns itself for\n   * method chaining.\n   */\n  clear(key) {\n    const cacheMap = this._cacheMap;\n    if (cacheMap) {\n      const cacheKey = this._cacheKeyFn(key);\n      cacheMap.delete(cacheKey);\n    }\n    return this;\n  }\n  /**\n   * Clears the entire cache. To be used when some event results in unknown\n   * invalidations across this particular `DataLoader`. Returns itself for\n   * method chaining.\n   */\n  clearAll() {\n    const cacheMap = this._cacheMap;\n    if (cacheMap) {\n      cacheMap.clear();\n    }\n    return this;\n  }\n  /**\n   * Adds the provided key and value to the cache. If the key already\n   * exists, no change is made. Returns itself for method chaining.\n   *\n   * To prime the cache with an error at a key, provide an Error instance.\n   */\n  prime(key, value) {\n    const cacheMap = this._cacheMap;\n    if (cacheMap) {\n      const cacheKey = this._cacheKeyFn(key);\n      if (cacheMap.get(cacheKey) === void 0) {\n        let promise;\n        if (value instanceof Error) {\n          promise = Promise.reject(value);\n          promise.catch(() => {\n          });\n        } else {\n          promise = Promise.resolve(value);\n        }\n        cacheMap.set(cacheKey, promise);\n      }\n    }\n    return this;\n  }\n}\nconst enqueuePostPromiseJob = (\n  /** @ts-ignore */\n  typeof process === \"object\" && typeof process.nextTick === \"function\" ? function(fn) {\n    if (!resolvedPromise) {\n      resolvedPromise = Promise.resolve();\n    }\n    resolvedPromise.then(() => {\n      process.nextTick(fn);\n    });\n  } : (\n    // @ts-ignore\n    typeof setImmediate === \"function\" ? function(fn) {\n      setImmediate(fn);\n    } : function(fn) {\n      setTimeout(fn);\n    }\n  )\n);\nlet resolvedPromise;\nfunction getCurrentBatch(loader) {\n  const existingBatch = loader._batch;\n  if (existingBatch !== null && !existingBatch.hasDispatched && existingBatch.keys.length < loader._maxBatchSize) {\n    return existingBatch;\n  }\n  const newBatch = { hasDispatched: false, keys: [], callbacks: [] };\n  loader._batch = newBatch;\n  loader._batchScheduleFn(() => {\n    dispatchBatch(loader, newBatch);\n  });\n  return newBatch;\n}\nfunction dispatchBatch(loader, batch) {\n  batch.hasDispatched = true;\n  if (batch.keys.length === 0) {\n    resolveCacheHits(batch);\n    return;\n  }\n  let batchPromise;\n  try {\n    batchPromise = loader._batchLoadFn(batch.keys);\n  } catch (e) {\n    return failedDispatch(\n      loader,\n      batch,\n      new TypeError(\n        `DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function errored synchronously: ${String(e)}.`\n      )\n    );\n  }\n  if (!batchPromise || typeof batchPromise.then !== \"function\") {\n    return failedDispatch(\n      loader,\n      batch,\n      new TypeError(\n        `DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did not return a Promise: ${String(batchPromise)}.`\n      )\n    );\n  }\n  Promise.resolve(batchPromise).then((values) => {\n    if (!isArrayLike(values)) {\n      throw new TypeError(\n        `DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did not return a Promise of an Array: ${String(values)}.`\n      );\n    }\n    if (values.length !== batch.keys.length) {\n      throw new TypeError(\n        `DataLoader must be constructed with a function which accepts Array<key> and returns Promise<Array<value>>, but the function did not return a Promise of an Array of the same length as the Array of keys.\n\nKeys:\n${String(batch.keys)}\n\nValues:\n${String(values)}`\n      );\n    }\n    resolveCacheHits(batch);\n    for (let i = 0; i < batch.callbacks.length; i++) {\n      const value = values[i];\n      if (value instanceof Error) {\n        batch.callbacks[i].reject(value);\n      } else {\n        batch.callbacks[i].resolve(value);\n      }\n    }\n  }).catch((error) => {\n    failedDispatch(loader, batch, error);\n  });\n}\nfunction failedDispatch(loader, batch, error) {\n  resolveCacheHits(batch);\n  for (let i = 0; i < batch.keys.length; i++) {\n    loader.clear(batch.keys[i]);\n    batch.callbacks[i].reject(error);\n  }\n}\nfunction resolveCacheHits(batch) {\n  if (batch.cacheHits) {\n    for (let i = 0; i < batch.cacheHits.length; i++) {\n      batch.cacheHits[i]();\n    }\n  }\n}\nfunction getValidMaxBatchSize(options) {\n  const shouldBatch = !options || options.batch !== false;\n  if (!shouldBatch) {\n    return 1;\n  }\n  const maxBatchSize = options && options.maxBatchSize;\n  if (maxBatchSize === void 0) {\n    return Infinity;\n  }\n  if (typeof maxBatchSize !== \"number\" || maxBatchSize < 1) {\n    throw new TypeError(`maxBatchSize must be a positive number: ${maxBatchSize}`);\n  }\n  return maxBatchSize;\n}\nfunction getValidBatchScheduleFn(options) {\n  const batchScheduleFn = options && options.batchScheduleFn;\n  if (batchScheduleFn === void 0) {\n    return enqueuePostPromiseJob;\n  }\n  if (typeof batchScheduleFn !== \"function\") {\n    throw new TypeError(`batchScheduleFn must be a function: ${batchScheduleFn}`);\n  }\n  return batchScheduleFn;\n}\nfunction getValidCacheKeyFn(options) {\n  const cacheKeyFn = options && options.cacheKeyFn;\n  if (cacheKeyFn === void 0) {\n    return (key) => key;\n  }\n  if (typeof cacheKeyFn !== \"function\") {\n    throw new TypeError(`cacheKeyFn must be a function: ${cacheKeyFn}`);\n  }\n  return cacheKeyFn;\n}\nfunction getValidCacheMap(options) {\n  const shouldCache = !options || options.cache !== false;\n  if (!shouldCache) {\n    return null;\n  }\n  const cacheMap = options && options.cacheMap;\n  if (cacheMap === void 0) {\n    return /* @__PURE__ */ new Map();\n  }\n  if (cacheMap !== null) {\n    const cacheFunctions = [\"get\", \"set\", \"delete\", \"clear\"];\n    const missingFunctions = cacheFunctions.filter(\n      (fnName) => cacheMap && typeof cacheMap[fnName] !== \"function\"\n    );\n    if (missingFunctions.length !== 0) {\n      throw new TypeError(\"Custom cacheMap missing methods: \" + missingFunctions.join(\", \"));\n    }\n  }\n  return cacheMap;\n}\nfunction getValidName(options) {\n  if (options && options.name) {\n    return options.name;\n  }\n  return null;\n}\nfunction isArrayLike(x) {\n  return typeof x === \"object\" && x !== null && \"length\" in x && typeof x.length === \"number\" && (x.length === 0 || x.length > 0 && Object.prototype.hasOwnProperty.call(x, x.length - 1));\n}\nexport {\n  DataLoader\n};\n\n", "function ulebEncode(num) {\n  let bigNum = BigInt(num);\n  const arr = [];\n  let len = 0;\n  if (bigNum === 0n) {\n    return [0];\n  }\n  while (bigNum > 0) {\n    arr[len] = Number(bigNum & 0x7fn);\n    if (bigNum >>= 7n) {\n      arr[len] |= 128;\n    }\n    len += 1;\n  }\n  return arr;\n}\nfunction ulebDecode(arr) {\n  let total = 0n;\n  let shift = 0n;\n  let len = 0;\n  while (true) {\n    if (len >= arr.length) {\n      throw new Error(\"ULEB decode error: buffer overflow\");\n    }\n    const byte = arr[len];\n    len += 1;\n    total += BigInt(byte & 127) << shift;\n    if ((byte & 128) === 0) {\n      break;\n    }\n    shift += 7n;\n  }\n  if (total > BigInt(Number.MAX_SAFE_INTEGER)) {\n    throw new Error(\"ULEB decode error: value exceeds MAX_SAFE_INTEGER\");\n  }\n  return {\n    value: Number(total),\n    length: len\n  };\n}\nexport {\n  ulebDecode,\n  ulebEncode\n};\n\n", "import { ulebDecode } from \"./uleb.js\";\nclass BcsReader {\n  /**\n   * @param {Uint8Array} data Data to use as a buffer.\n   */\n  constructor(data) {\n    this.bytePosition = 0;\n    this.dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\n  }\n  /**\n   * Shift current cursor position by `bytes`.\n   *\n   * @param {Number} bytes Number of bytes to\n   * @returns {this} Self for possible chaining.\n   */\n  shift(bytes) {\n    this.bytePosition += bytes;\n    return this;\n  }\n  /**\n   * Read U8 value from the buffer and shift cursor by 1.\n   * @returns\n   */\n  read8() {\n    const value = this.dataView.getUint8(this.bytePosition);\n    this.shift(1);\n    return value;\n  }\n  /**\n   * Read U16 value from the buffer and shift cursor by 2.\n   * @returns\n   */\n  read16() {\n    const value = this.dataView.getUint16(this.bytePosition, true);\n    this.shift(2);\n    return value;\n  }\n  /**\n   * Read U32 value from the buffer and shift cursor by 4.\n   * @returns\n   */\n  read32() {\n    const value = this.dataView.getUint32(this.bytePosition, true);\n    this.shift(4);\n    return value;\n  }\n  /**\n   * Read U64 value from the buffer and shift cursor by 8.\n   * @returns\n   */\n  read64() {\n    const value1 = this.read32();\n    const value2 = this.read32();\n    const result = value2.toString(16) + value1.toString(16).padStart(8, \"0\");\n    return BigInt(\"0x\" + result).toString(10);\n  }\n  /**\n   * Read U128 value from the buffer and shift cursor by 16.\n   */\n  read128() {\n    const value1 = BigInt(this.read64());\n    const value2 = BigInt(this.read64());\n    const result = value2.toString(16) + value1.toString(16).padStart(16, \"0\");\n    return BigInt(\"0x\" + result).toString(10);\n  }\n  /**\n   * Read U128 value from the buffer and shift cursor by 32.\n   * @returns\n   */\n  read256() {\n    const value1 = BigInt(this.read128());\n    const value2 = BigInt(this.read128());\n    const result = value2.toString(16) + value1.toString(16).padStart(32, \"0\");\n    return BigInt(\"0x\" + result).toString(10);\n  }\n  /**\n   * Read `num` number of bytes from the buffer and shift cursor by `num`.\n   * @param num Number of bytes to read.\n   */\n  readBytes(num) {\n    const start = this.bytePosition + this.dataView.byteOffset;\n    const value = new Uint8Array(this.dataView.buffer, start, num);\n    this.shift(num);\n    return value;\n  }\n  /**\n   * Read ULEB value - an integer of varying size. Used for enum indexes and\n   * vector lengths.\n   * @returns {Number} The ULEB value.\n   */\n  readULEB() {\n    const start = this.bytePosition + this.dataView.byteOffset;\n    const buffer = new Uint8Array(this.dataView.buffer, start);\n    const { value, length } = ulebDecode(buffer);\n    this.shift(length);\n    return value;\n  }\n  /**\n   * Read a BCS vector: read a length and then apply function `cb` X times\n   * where X is the length of the vector, defined as ULEB in BCS bytes.\n   * @param cb Callback to process elements of vector.\n   * @returns {Array<Any>} Array of the resulting values, returned by callback.\n   */\n  readVec(cb) {\n    const length = this.readULEB();\n    const result = [];\n    for (let i = 0; i < length; i++) {\n      result.push(cb(this, i, length));\n    }\n    return result;\n  }\n}\nexport {\n  BcsReader\n};\n\n", "import { fromBase58, fromBase64, fromHex, toBase58, toBase64, toHex } from \"@mysten/utils\";\nfunction encodeStr(data, encoding) {\n  switch (encoding) {\n    case \"base58\":\n      return toBase58(data);\n    case \"base64\":\n      return toBase64(data);\n    case \"hex\":\n      return toHex(data);\n    default:\n      throw new Error(\"Unsupported encoding, supported values are: base64, hex\");\n  }\n}\nfunction decodeStr(data, encoding) {\n  switch (encoding) {\n    case \"base58\":\n      return fromBase58(data);\n    case \"base64\":\n      return fromBase64(data);\n    case \"hex\":\n      return fromHex(data);\n    default:\n      throw new Error(\"Unsupported encoding, supported values are: base64, hex\");\n  }\n}\nfunction splitGenericParameters(str, genericSeparators = [\"<\", \">\"]) {\n  const [left, right] = genericSeparators;\n  const tok = [];\n  let word = \"\";\n  let nestedAngleBrackets = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (char === left) {\n      nestedAngleBrackets++;\n    }\n    if (char === right) {\n      nestedAngleBrackets--;\n    }\n    if (nestedAngleBrackets === 0 && char === \",\") {\n      tok.push(word.trim());\n      word = \"\";\n      continue;\n    }\n    word += char;\n  }\n  tok.push(word.trim());\n  return tok;\n}\nexport {\n  decodeStr,\n  encodeStr,\n  splitGenericParameters\n};\n\n", "import { ulebEncode } from \"./uleb.js\";\nimport { encodeStr } from \"./utils.js\";\nclass BcsWriter {\n  constructor({\n    initialSize = 1024,\n    maxSize = Infinity,\n    allocateSize = 1024\n  } = {}) {\n    this.bytePosition = 0;\n    this.size = initialSize;\n    this.maxSize = maxSize;\n    this.allocateSize = allocateSize;\n    this.dataView = new DataView(new ArrayBuffer(initialSize));\n  }\n  ensureSizeOrGrow(bytes) {\n    const requiredSize = this.bytePosition + bytes;\n    if (requiredSize > this.size) {\n      const nextSize = Math.min(\n        this.maxSize,\n        Math.max(this.size + requiredSize, this.size + this.allocateSize)\n      );\n      if (requiredSize > nextSize) {\n        throw new Error(\n          `Attempting to serialize to BCS, but buffer does not have enough size. Allocated size: ${this.size}, Max size: ${this.maxSize}, Required size: ${requiredSize}`\n        );\n      }\n      this.size = nextSize;\n      const nextBuffer = new ArrayBuffer(this.size);\n      new Uint8Array(nextBuffer).set(new Uint8Array(this.dataView.buffer));\n      this.dataView = new DataView(nextBuffer);\n    }\n  }\n  /**\n   * Shift current cursor position by `bytes`.\n   *\n   * @param {Number} bytes Number of bytes to\n   * @returns {this} Self for possible chaining.\n   */\n  shift(bytes) {\n    this.bytePosition += bytes;\n    return this;\n  }\n  /**\n   * Write a U8 value into a buffer and shift cursor position by 1.\n   * @param {Number} value Value to write.\n   * @returns {this}\n   */\n  write8(value) {\n    this.ensureSizeOrGrow(1);\n    this.dataView.setUint8(this.bytePosition, Number(value));\n    return this.shift(1);\n  }\n  /**\n   * Write a U8 value into a buffer and shift cursor position by 1.\n   * @param {Number} value Value to write.\n   * @returns {this}\n   */\n  writeBytes(bytes) {\n    this.ensureSizeOrGrow(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n      this.dataView.setUint8(this.bytePosition + i, bytes[i]);\n    }\n    return this.shift(bytes.length);\n  }\n  /**\n   * Write a U16 value into a buffer and shift cursor position by 2.\n   * @param {Number} value Value to write.\n   * @returns {this}\n   */\n  write16(value) {\n    this.ensureSizeOrGrow(2);\n    this.dataView.setUint16(this.bytePosition, Number(value), true);\n    return this.shift(2);\n  }\n  /**\n   * Write a U32 value into a buffer and shift cursor position by 4.\n   * @param {Number} value Value to write.\n   * @returns {this}\n   */\n  write32(value) {\n    this.ensureSizeOrGrow(4);\n    this.dataView.setUint32(this.bytePosition, Number(value), true);\n    return this.shift(4);\n  }\n  /**\n   * Write a U64 value into a buffer and shift cursor position by 8.\n   * @param {bigint} value Value to write.\n   * @returns {this}\n   */\n  write64(value) {\n    toLittleEndian(BigInt(value), 8).forEach((el) => this.write8(el));\n    return this;\n  }\n  /**\n   * Write a U128 value into a buffer and shift cursor position by 16.\n   *\n   * @param {bigint} value Value to write.\n   * @returns {this}\n   */\n  write128(value) {\n    toLittleEndian(BigInt(value), 16).forEach((el) => this.write8(el));\n    return this;\n  }\n  /**\n   * Write a U256 value into a buffer and shift cursor position by 16.\n   *\n   * @param {bigint} value Value to write.\n   * @returns {this}\n   */\n  write256(value) {\n    toLittleEndian(BigInt(value), 32).forEach((el) => this.write8(el));\n    return this;\n  }\n  /**\n   * Write a ULEB value into a buffer and shift cursor position by number of bytes\n   * written.\n   * @param {Number} value Value to write.\n   * @returns {this}\n   */\n  writeULEB(value) {\n    ulebEncode(value).forEach((el) => this.write8(el));\n    return this;\n  }\n  /**\n   * Write a vector into a buffer by first writing the vector length and then calling\n   * a callback on each passed value.\n   *\n   * @param {Array<Any>} vector Array of elements to write.\n   * @param {WriteVecCb} cb Callback to call on each element of the vector.\n   * @returns {this}\n   */\n  writeVec(vector, cb) {\n    this.writeULEB(vector.length);\n    Array.from(vector).forEach((el, i) => cb(this, el, i, vector.length));\n    return this;\n  }\n  /**\n   * Adds support for iterations over the object.\n   * @returns {Uint8Array}\n   */\n  // oxlint-disable-next-line require-yields\n  *[Symbol.iterator]() {\n    for (let i = 0; i < this.bytePosition; i++) {\n      yield this.dataView.getUint8(i);\n    }\n    return this.toBytes();\n  }\n  /**\n   * Get underlying buffer taking only value bytes (in case initial buffer size was bigger).\n   * @returns {Uint8Array} Resulting bcs.\n   */\n  toBytes() {\n    return new Uint8Array(this.dataView.buffer.slice(0, this.bytePosition));\n  }\n  /**\n   * Represent data as 'hex' or 'base64'\n   * @param encoding Encoding to use: 'base64' or 'hex'\n   */\n  toString(encoding) {\n    return encodeStr(this.toBytes(), encoding);\n  }\n}\nfunction toLittleEndian(bigint, size) {\n  const result = new Uint8Array(size);\n  let i = 0;\n  while (bigint > 0) {\n    result[i] = Number(bigint % BigInt(256));\n    bigint = bigint / BigInt(256);\n    i += 1;\n  }\n  return result;\n}\nexport {\n  BcsWriter\n};\n\n", "var __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar _write, _serialize, _schema, _bytes;\nimport { fromBase58, fromBase64, toBase58, toBase64, fromHex, toHex } from \"@mysten/utils\";\nimport { BcsReader } from \"./reader.js\";\nimport { ulebEncode } from \"./uleb.js\";\nimport { BcsWriter } from \"./writer.js\";\nconst _BcsType = class _BcsType {\n  constructor(options) {\n    __privateAdd(this, _write);\n    __privateAdd(this, _serialize);\n    this.name = options.name;\n    this.read = options.read;\n    this.serializedSize = options.serializedSize ?? (() => null);\n    __privateSet(this, _write, options.write);\n    __privateSet(this, _serialize, options.serialize ?? ((value, options2) => {\n      const writer = new BcsWriter({\n        initialSize: this.serializedSize(value) ?? void 0,\n        ...options2\n      });\n      __privateGet(this, _write).call(this, value, writer);\n      return writer.toBytes();\n    }));\n    this.validate = options.validate ?? (() => {\n    });\n  }\n  write(value, writer) {\n    this.validate(value);\n    __privateGet(this, _write).call(this, value, writer);\n  }\n  serialize(value, options) {\n    this.validate(value);\n    return new SerializedBcs(this, __privateGet(this, _serialize).call(this, value, options));\n  }\n  parse(bytes) {\n    const reader = new BcsReader(bytes);\n    return this.read(reader);\n  }\n  fromHex(hex) {\n    return this.parse(fromHex(hex));\n  }\n  fromBase58(b64) {\n    return this.parse(fromBase58(b64));\n  }\n  fromBase64(b64) {\n    return this.parse(fromBase64(b64));\n  }\n  transform({\n    name,\n    input,\n    output,\n    validate\n  }) {\n    return new _BcsType({\n      name: name ?? this.name,\n      read: (reader) => output ? output(this.read(reader)) : this.read(reader),\n      write: (value, writer) => __privateGet(this, _write).call(this, input ? input(value) : value, writer),\n      serializedSize: (value) => this.serializedSize(input ? input(value) : value),\n      serialize: (value, options) => __privateGet(this, _serialize).call(this, input ? input(value) : value, options),\n      validate: (value) => {\n        validate?.(value);\n        this.validate(input ? input(value) : value);\n      }\n    });\n  }\n};\n_write = new WeakMap();\n_serialize = new WeakMap();\nlet BcsType = _BcsType;\nconst SERIALIZED_BCS_BRAND = Symbol.for(\"@mysten/serialized-bcs\");\nfunction isSerializedBcs(obj) {\n  return !!obj && typeof obj === \"object\" && obj[SERIALIZED_BCS_BRAND] === true;\n}\nclass SerializedBcs {\n  constructor(schema, bytes) {\n    __privateAdd(this, _schema);\n    __privateAdd(this, _bytes);\n    __privateSet(this, _schema, schema);\n    __privateSet(this, _bytes, bytes);\n  }\n  // Used to brand SerializedBcs so that they can be identified, even between multiple copies\n  // of the @mysten/bcs package are installed\n  get [SERIALIZED_BCS_BRAND]() {\n    return true;\n  }\n  toBytes() {\n    return __privateGet(this, _bytes);\n  }\n  toHex() {\n    return toHex(__privateGet(this, _bytes));\n  }\n  toBase64() {\n    return toBase64(__privateGet(this, _bytes));\n  }\n  toBase58() {\n    return toBase58(__privateGet(this, _bytes));\n  }\n  parse() {\n    return __privateGet(this, _schema).parse(__privateGet(this, _bytes));\n  }\n}\n_schema = new WeakMap();\n_bytes = new WeakMap();\nfunction fixedSizeBcsType({\n  size,\n  ...options\n}) {\n  return new BcsType({\n    ...options,\n    serializedSize: () => size\n  });\n}\nfunction uIntBcsType({\n  readMethod,\n  writeMethod,\n  ...options\n}) {\n  return fixedSizeBcsType({\n    ...options,\n    read: (reader) => reader[readMethod](),\n    write: (value, writer) => writer[writeMethod](value),\n    validate: (value) => {\n      if (value < 0 || value > options.maxValue) {\n        throw new TypeError(\n          `Invalid ${options.name} value: ${value}. Expected value in range 0-${options.maxValue}`\n        );\n      }\n      options.validate?.(value);\n    }\n  });\n}\nfunction bigUIntBcsType({\n  readMethod,\n  writeMethod,\n  ...options\n}) {\n  return fixedSizeBcsType({\n    ...options,\n    read: (reader) => reader[readMethod](),\n    write: (value, writer) => writer[writeMethod](BigInt(value)),\n    validate: (val) => {\n      const value = BigInt(val);\n      if (value < 0 || value > options.maxValue) {\n        throw new TypeError(\n          `Invalid ${options.name} value: ${value}. Expected value in range 0-${options.maxValue}`\n        );\n      }\n      options.validate?.(value);\n    }\n  });\n}\nfunction dynamicSizeBcsType({\n  serialize,\n  ...options\n}) {\n  const type = new BcsType({\n    ...options,\n    serialize,\n    write: (value, writer) => {\n      for (const byte of type.serialize(value).toBytes()) {\n        writer.write8(byte);\n      }\n    }\n  });\n  return type;\n}\nfunction stringLikeBcsType({\n  toBytes,\n  fromBytes,\n  ...options\n}) {\n  return new BcsType({\n    ...options,\n    read: (reader) => {\n      const length = reader.readULEB();\n      const bytes = reader.readBytes(length);\n      return fromBytes(bytes);\n    },\n    write: (hex, writer) => {\n      const bytes = toBytes(hex);\n      writer.writeULEB(bytes.length);\n      for (let i = 0; i < bytes.length; i++) {\n        writer.write8(bytes[i]);\n      }\n    },\n    serialize: (value) => {\n      const bytes = toBytes(value);\n      const size = ulebEncode(bytes.length);\n      const result = new Uint8Array(size.length + bytes.length);\n      result.set(size, 0);\n      result.set(bytes, size.length);\n      return result;\n    },\n    validate: (value) => {\n      if (typeof value !== \"string\") {\n        throw new TypeError(`Invalid ${options.name} value: ${value}. Expected string`);\n      }\n      options.validate?.(value);\n    }\n  });\n}\nfunction lazyBcsType(cb) {\n  let lazyType = null;\n  function getType() {\n    if (!lazyType) {\n      lazyType = cb();\n    }\n    return lazyType;\n  }\n  return new BcsType({\n    name: \"lazy\",\n    read: (data) => getType().read(data),\n    serializedSize: (value) => getType().serializedSize(value),\n    write: (value, writer) => getType().write(value, writer),\n    serialize: (value, options) => getType().serialize(value, options).toBytes()\n  });\n}\nclass BcsStruct extends BcsType {\n  constructor({ name, fields, ...options }) {\n    const canonicalOrder = Object.entries(fields);\n    super({\n      name,\n      serializedSize: (values) => {\n        let total = 0;\n        for (const [field, type] of canonicalOrder) {\n          const size = type.serializedSize(values[field]);\n          if (size == null) {\n            return null;\n          }\n          total += size;\n        }\n        return total;\n      },\n      read: (reader) => {\n        const result = {};\n        for (const [field, type] of canonicalOrder) {\n          result[field] = type.read(reader);\n        }\n        return result;\n      },\n      write: (value, writer) => {\n        for (const [field, type] of canonicalOrder) {\n          type.write(value[field], writer);\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (typeof value !== \"object\" || value == null) {\n          throw new TypeError(`Expected object, found ${typeof value}`);\n        }\n      }\n    });\n  }\n}\nclass BcsEnum extends BcsType {\n  constructor({ fields, ...options }) {\n    const canonicalOrder = Object.entries(fields);\n    super({\n      read: (reader) => {\n        const index = reader.readULEB();\n        const enumEntry = canonicalOrder[index];\n        if (!enumEntry) {\n          throw new TypeError(`Unknown value ${index} for enum ${options.name}`);\n        }\n        const [kind, type] = enumEntry;\n        return {\n          [kind]: type?.read(reader) ?? true,\n          $kind: kind\n        };\n      },\n      write: (value, writer) => {\n        const [name, val] = Object.entries(value).filter(\n          ([name2]) => Object.hasOwn(fields, name2)\n        )[0];\n        for (let i = 0; i < canonicalOrder.length; i++) {\n          const [optionName, optionType] = canonicalOrder[i];\n          if (optionName === name) {\n            writer.writeULEB(i);\n            optionType?.write(val, writer);\n            return;\n          }\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (typeof value !== \"object\" || value == null) {\n          throw new TypeError(`Expected object, found ${typeof value}`);\n        }\n        const keys = Object.keys(value).filter(\n          (k) => value[k] !== void 0 && Object.hasOwn(fields, k)\n        );\n        if (keys.length !== 1) {\n          throw new TypeError(\n            `Expected object with one key, but found ${keys.length} for type ${options.name}}`\n          );\n        }\n        const [variant] = keys;\n        if (!Object.hasOwn(fields, variant)) {\n          throw new TypeError(`Invalid enum variant ${variant}`);\n        }\n      }\n    });\n  }\n}\nclass BcsTuple extends BcsType {\n  constructor({ fields, name, ...options }) {\n    super({\n      name: name ?? `(${fields.map((t) => t.name).join(\", \")})`,\n      serializedSize: (values) => {\n        let total = 0;\n        for (let i = 0; i < fields.length; i++) {\n          const size = fields[i].serializedSize(values[i]);\n          if (size == null) {\n            return null;\n          }\n          total += size;\n        }\n        return total;\n      },\n      read: (reader) => {\n        const result = [];\n        for (const field of fields) {\n          result.push(field.read(reader));\n        }\n        return result;\n      },\n      write: (value, writer) => {\n        for (let i = 0; i < fields.length; i++) {\n          fields[i].write(value[i], writer);\n        }\n      },\n      ...options,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (!Array.isArray(value)) {\n          throw new TypeError(`Expected array, found ${typeof value}`);\n        }\n        if (value.length !== fields.length) {\n          throw new TypeError(`Expected array of length ${fields.length}, found ${value.length}`);\n        }\n      }\n    });\n  }\n}\nexport {\n  BcsEnum,\n  BcsStruct,\n  BcsTuple,\n  BcsType,\n  SerializedBcs,\n  bigUIntBcsType,\n  dynamicSizeBcsType,\n  fixedSizeBcsType,\n  isSerializedBcs,\n  lazyBcsType,\n  stringLikeBcsType,\n  uIntBcsType\n};\n\n", "import {\n  BcsEnum,\n  BcsStruct,\n  BcsTuple,\n  BcsType,\n  bigUIntBcsType,\n  dynamicSizeBcsType,\n  fixedSizeBcsType,\n  lazyBcsType,\n  stringLikeBcsType,\n  uIntBcsType\n} from \"./bcs-type.js\";\nimport { ulebEncode } from \"./uleb.js\";\nfunction fixedArray(size, type, options) {\n  return new BcsType({\n    read: (reader) => {\n      const result = new Array(size);\n      for (let i = 0; i < size; i++) {\n        result[i] = type.read(reader);\n      }\n      return result;\n    },\n    write: (value, writer) => {\n      for (const item of value) {\n        type.write(item, writer);\n      }\n    },\n    ...options,\n    name: options?.name ?? `${type.name}[${size}]`,\n    validate: (value) => {\n      options?.validate?.(value);\n      if (!value || typeof value !== \"object\" || !(\"length\" in value)) {\n        throw new TypeError(`Expected array, found ${typeof value}`);\n      }\n      if (value.length !== size) {\n        throw new TypeError(`Expected array of length ${size}, found ${value.length}`);\n      }\n    }\n  });\n}\nfunction option(type) {\n  return bcs.enum(`Option<${type.name}>`, {\n    None: null,\n    Some: type\n  }).transform({\n    input: (value) => {\n      if (value == null) {\n        return { None: true };\n      }\n      return { Some: value };\n    },\n    output: (value) => {\n      if (value.$kind === \"Some\") {\n        return value.Some;\n      }\n      return null;\n    }\n  });\n}\nfunction vector(type, options) {\n  return new BcsType({\n    read: (reader) => {\n      const length = reader.readULEB();\n      const result = new Array(length);\n      for (let i = 0; i < length; i++) {\n        result[i] = type.read(reader);\n      }\n      return result;\n    },\n    write: (value, writer) => {\n      writer.writeULEB(value.length);\n      for (const item of value) {\n        type.write(item, writer);\n      }\n    },\n    ...options,\n    name: options?.name ?? `vector<${type.name}>`,\n    validate: (value) => {\n      options?.validate?.(value);\n      if (!value || typeof value !== \"object\" || !(\"length\" in value)) {\n        throw new TypeError(`Expected array, found ${typeof value}`);\n      }\n    }\n  });\n}\nfunction map(keyType, valueType) {\n  return bcs.vector(bcs.tuple([keyType, valueType])).transform({\n    name: `Map<${keyType.name}, ${valueType.name}>`,\n    input: (value) => {\n      return [...value.entries()];\n    },\n    output: (value) => {\n      const result = /* @__PURE__ */ new Map();\n      for (const [key, val] of value) {\n        result.set(key, val);\n      }\n      return result;\n    }\n  });\n}\nconst bcs = {\n  /**\n   * Creates a BcsType that can be used to read and write an 8-bit unsigned integer.\n   * @example\n   * bcs.u8().serialize(255).toBytes() // Uint8Array [ 255 ]\n   */\n  u8(options) {\n    return uIntBcsType({\n      readMethod: \"read8\",\n      writeMethod: \"write8\",\n      size: 1,\n      maxValue: 2 ** 8 - 1,\n      ...options,\n      name: options?.name ?? \"u8\"\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 16-bit unsigned integer.\n   * @example\n   * bcs.u16().serialize(65535).toBytes() // Uint8Array [ 255, 255 ]\n   */\n  u16(options) {\n    return uIntBcsType({\n      readMethod: \"read16\",\n      writeMethod: \"write16\",\n      size: 2,\n      maxValue: 2 ** 16 - 1,\n      ...options,\n      name: options?.name ?? \"u16\"\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 32-bit unsigned integer.\n   * @example\n   * bcs.u32().serialize(4294967295).toBytes() // Uint8Array [ 255, 255, 255, 255 ]\n   */\n  u32(options) {\n    return uIntBcsType({\n      readMethod: \"read32\",\n      writeMethod: \"write32\",\n      size: 4,\n      maxValue: 2 ** 32 - 1,\n      ...options,\n      name: options?.name ?? \"u32\"\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 64-bit unsigned integer.\n   * @example\n   * bcs.u64().serialize(1).toBytes() // Uint8Array [ 1, 0, 0, 0, 0, 0, 0, 0 ]\n   */\n  u64(options) {\n    return bigUIntBcsType({\n      readMethod: \"read64\",\n      writeMethod: \"write64\",\n      size: 8,\n      maxValue: 2n ** 64n - 1n,\n      ...options,\n      name: options?.name ?? \"u64\"\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 128-bit unsigned integer.\n   * @example\n   * bcs.u128().serialize(1).toBytes() // Uint8Array [ 1, ..., 0 ]\n   */\n  u128(options) {\n    return bigUIntBcsType({\n      readMethod: \"read128\",\n      writeMethod: \"write128\",\n      size: 16,\n      maxValue: 2n ** 128n - 1n,\n      ...options,\n      name: options?.name ?? \"u128\"\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write a 256-bit unsigned integer.\n   * @example\n   * bcs.u256().serialize(1).toBytes() // Uint8Array [ 1, ..., 0 ]\n   */\n  u256(options) {\n    return bigUIntBcsType({\n      readMethod: \"read256\",\n      writeMethod: \"write256\",\n      size: 32,\n      maxValue: 2n ** 256n - 1n,\n      ...options,\n      name: options?.name ?? \"u256\"\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write boolean values.\n   * @example\n   * bcs.bool().serialize(true).toBytes() // Uint8Array [ 1 ]\n   */\n  bool(options) {\n    return fixedSizeBcsType({\n      size: 1,\n      read: (reader) => reader.read8() === 1,\n      write: (value, writer) => writer.write8(value ? 1 : 0),\n      ...options,\n      name: options?.name ?? \"bool\",\n      validate: (value) => {\n        options?.validate?.(value);\n        if (typeof value !== \"boolean\") {\n          throw new TypeError(`Expected boolean, found ${typeof value}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType that can be used to read and write unsigned LEB encoded integers\n   * @example\n   *\n   */\n  uleb128(options) {\n    return dynamicSizeBcsType({\n      read: (reader) => reader.readULEB(),\n      serialize: (value) => {\n        return Uint8Array.from(ulebEncode(value));\n      },\n      ...options,\n      name: options?.name ?? \"uleb128\"\n    });\n  },\n  /**\n   * Creates a BcsType representing a fixed length byte array\n   * @param size The number of bytes this types represents\n   * @example\n   * bcs.bytes(3).serialize(new Uint8Array([1, 2, 3])).toBytes() // Uint8Array [1, 2, 3]\n   */\n  bytes(size, options) {\n    return fixedSizeBcsType({\n      size,\n      read: (reader) => reader.readBytes(size),\n      write: (value, writer) => {\n        writer.writeBytes(new Uint8Array(value));\n      },\n      ...options,\n      name: options?.name ?? `bytes[${size}]`,\n      validate: (value) => {\n        options?.validate?.(value);\n        if (!value || typeof value !== \"object\" || !(\"length\" in value)) {\n          throw new TypeError(`Expected array, found ${typeof value}`);\n        }\n        if (value.length !== size) {\n          throw new TypeError(`Expected array of length ${size}, found ${value.length}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType representing a variable length byte array\n   *\n   * @example\n   * bcs.byteVector().serialize([1, 2, 3]).toBytes() // Uint8Array [3, 1, 2, 3]\n   */\n  byteVector(options) {\n    return new BcsType({\n      read: (reader) => {\n        const length = reader.readULEB();\n        return reader.readBytes(length);\n      },\n      write: (value, writer) => {\n        const array = new Uint8Array(value);\n        writer.writeULEB(array.length);\n        writer.writeBytes(array);\n      },\n      ...options,\n      name: options?.name ?? \"vector<u8>\",\n      serializedSize: (value) => {\n        const length = \"length\" in value ? value.length : null;\n        return length == null ? null : ulebEncode(length).length + length;\n      },\n      validate: (value) => {\n        options?.validate?.(value);\n        if (!value || typeof value !== \"object\" || !(\"length\" in value)) {\n          throw new TypeError(`Expected array, found ${typeof value}`);\n        }\n      }\n    });\n  },\n  /**\n   * Creates a BcsType that can ser/de string values.  Strings will be UTF-8 encoded\n   * @example\n   * bcs.string().serialize('a').toBytes() // Uint8Array [ 1, 97 ]\n   */\n  string(options) {\n    return stringLikeBcsType({\n      toBytes: (value) => new TextEncoder().encode(value),\n      fromBytes: (bytes) => new TextDecoder().decode(bytes),\n      ...options,\n      name: options?.name ?? \"string\"\n    });\n  },\n  /**\n   * Creates a BcsType that represents a fixed length array of a given type\n   * @param size The number of elements in the array\n   * @param type The BcsType of each element in the array\n   * @example\n   * bcs.fixedArray(3, bcs.u8()).serialize([1, 2, 3]).toBytes() // Uint8Array [ 1, 2, 3 ]\n   */\n  fixedArray,\n  /**\n   * Creates a BcsType representing an optional value\n   * @param type The BcsType of the optional value\n   * @example\n   * bcs.option(bcs.u8()).serialize(null).toBytes() // Uint8Array [ 0 ]\n   * bcs.option(bcs.u8()).serialize(1).toBytes() // Uint8Array [ 1, 1 ]\n   */\n  option,\n  /**\n   * Creates a BcsType representing a variable length vector of a given type\n   * @param type The BcsType of each element in the vector\n   *\n   * @example\n   * bcs.vector(bcs.u8()).toBytes([1, 2, 3]) // Uint8Array [ 3, 1, 2, 3 ]\n   */\n  vector,\n  /**\n   * Creates a BcsType representing a tuple of a given set of types\n   * @param types The BcsTypes for each element in the tuple\n   *\n   * @example\n   * const tuple = bcs.tuple([bcs.u8(), bcs.string(), bcs.bool()])\n   * tuple.serialize([1, 'a', true]).toBytes() // Uint8Array [ 1, 1, 97, 1 ]\n   */\n  tuple(fields, options) {\n    return new BcsTuple({\n      fields,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType representing a struct of a given set of fields\n   * @param name The name of the struct\n   * @param fields The fields of the struct. The order of the fields affects how data is serialized and deserialized\n   *\n   * @example\n   * const struct = bcs.struct('MyStruct', {\n   *  a: bcs.u8(),\n   *  b: bcs.string(),\n   * })\n   * struct.serialize({ a: 1, b: 'a' }).toBytes() // Uint8Array [ 1, 1, 97 ]\n   */\n  struct(name, fields, options) {\n    return new BcsStruct({\n      name,\n      fields,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType representing an enum of a given set of options\n   * @param name The name of the enum\n   * @param values The values of the enum. The order of the values affects how data is serialized and deserialized.\n   * null can be used to represent a variant with no data.\n   *\n   * @example\n   * const enum = bcs.enum('MyEnum', {\n   *   A: bcs.u8(),\n   *   B: bcs.string(),\n   *   C: null,\n   * })\n   * enum.serialize({ A: 1 }).toBytes() // Uint8Array [ 0, 1 ]\n   * enum.serialize({ B: 'a' }).toBytes() // Uint8Array [ 1, 1, 97 ]\n   * enum.serialize({ C: true }).toBytes() // Uint8Array [ 2 ]\n   */\n  enum(name, fields, options) {\n    return new BcsEnum({\n      name,\n      fields,\n      ...options\n    });\n  },\n  /**\n   * Creates a BcsType representing a map of a given key and value type\n   * @param keyType The BcsType of the key\n   * @param valueType The BcsType of the value\n   * @example\n   * const map = bcs.map(bcs.u8(), bcs.string())\n   * map.serialize(new Map([[2, 'a']])).toBytes() // Uint8Array [ 1, 2, 1, 97 ]\n   */\n  map,\n  /**\n   * Creates a BcsType that wraps another BcsType which is lazily evaluated. This is useful for creating recursive types.\n   * @param cb A callback that returns the BcsType\n   */\n  lazy(cb) {\n    return lazyBcsType(cb);\n  }\n};\nexport {\n  bcs\n};\n\n", "import { toBase58, fromBase58, toBase64, fromBase64, toHex, fromHex } from \"@mysten/utils\";\nimport {\n  BcsType,\n  BcsStruct,\n  BcsEnum,\n  BcsTuple,\n  isSerializedBcs,\n  SerializedBcs\n} from \"./bcs-type.js\";\nimport { bcs } from \"./bcs.js\";\nimport { BcsReader } from \"./reader.js\";\nimport { decodeStr, encodeStr, splitGenericParameters } from \"./utils.js\";\nimport { BcsWriter } from \"./writer.js\";\nconst toB58 = toBase58;\nconst fromB58 = fromBase58;\nconst toB64 = toBase64;\nconst fromB64 = fromBase64;\nconst toHEX = toHex;\nconst fromHEX = fromHex;\nexport {\n  BcsEnum,\n  BcsReader,\n  BcsStruct,\n  BcsTuple,\n  BcsType,\n  BcsWriter,\n  SerializedBcs,\n  bcs,\n  decodeStr,\n  encodeStr,\n  fromB58,\n  fromB64,\n  fromBase58,\n  fromBase64,\n  fromHEX,\n  fromHex,\n  isSerializedBcs,\n  splitGenericParameters,\n  toB58,\n  toB64,\n  toBase58,\n  toBase64,\n  toHEX,\n  toHex\n};\n\n", "const SUI_NS_NAME_REGEX = /^(?!.*(^(?!@)|[-.@])($|[-.@]))(?:[a-z0-9-]{0,63}(?:\\.[a-z0-9-]{0,63})*)?@[a-z0-9-]{0,63}$/i;\nconst SUI_NS_DOMAIN_REGEX = /^(?!.*(^|[-.])($|[-.]))(?:[a-z0-9-]{0,63}\\.)+sui$/i;\nconst MAX_SUI_NS_NAME_LENGTH = 235;\nfunction isValidSuiNSName(name) {\n  if (name.length > MAX_SUI_NS_NAME_LENGTH) {\n    return false;\n  }\n  if (name.includes(\"@\")) {\n    return SUI_NS_NAME_REGEX.test(name);\n  }\n  return SUI_NS_DOMAIN_REGEX.test(name);\n}\nfunction normalizeSuiNSName(name, format = \"at\") {\n  const lowerCase = name.toLowerCase();\n  let parts;\n  if (lowerCase.includes(\"@\")) {\n    if (!SUI_NS_NAME_REGEX.test(lowerCase)) {\n      throw new Error(`Invalid SuiNS name ${name}`);\n    }\n    const [labels, domain] = lowerCase.split(\"@\");\n    parts = [...labels ? labels.split(\".\") : [], domain];\n  } else {\n    if (!SUI_NS_DOMAIN_REGEX.test(lowerCase)) {\n      throw new Error(`Invalid SuiNS name ${name}`);\n    }\n    parts = lowerCase.split(\".\").slice(0, -1);\n  }\n  if (format === \"dot\") {\n    return `${parts.join(\".\")}.sui`;\n  }\n  return `${parts.slice(0, -1).join(\".\")}@${parts[parts.length - 1]}`;\n}\nexport {\n  isValidSuiNSName,\n  normalizeSuiNSName\n};\n\n", "import { isValidSuiNSName } from \"./suins.js\";\nconst NAME_PATTERN = /^([a-z0-9]+(?:-[a-z0-9]+)*)$/;\nconst VERSION_REGEX = /^\\d+$/;\nconst MAX_APP_SIZE = 64;\nconst NAME_SEPARATOR = \"/\";\nconst isValidNamedPackage = (name) => {\n  const parts = name.split(NAME_SEPARATOR);\n  if (parts.length < 2 || parts.length > 3) return false;\n  const [org, app, version] = parts;\n  if (version !== void 0 && !VERSION_REGEX.test(version)) return false;\n  if (!isValidSuiNSName(org)) return false;\n  return NAME_PATTERN.test(app) && app.length < MAX_APP_SIZE;\n};\nconst isValidNamedType = (type) => {\n  const splitType = type.split(/::|<|>|,/);\n  for (const t of splitType) {\n    if (t.includes(NAME_SEPARATOR) && !isValidNamedPackage(t)) return false;\n  }\n  return true;\n};\nexport {\n  isValidNamedPackage,\n  isValidNamedType\n};\n\n", "import { fromBase58, splitGenericParameters } from \"@mysten/bcs\";\nimport { isValidNamedPackage } from \"./move-registry.js\";\nconst TX_DIGEST_LENGTH = 32;\nfunction isValidTransactionDigest(value) {\n  try {\n    const buffer = fromBase58(value);\n    return buffer.length === TX_DIGEST_LENGTH;\n  } catch {\n    return false;\n  }\n}\nconst SUI_ADDRESS_LENGTH = 32;\nfunction isValidSuiAddress(value) {\n  return isHex(value) && getHexByteLength(value) === SUI_ADDRESS_LENGTH;\n}\nfunction isValidSuiObjectId(value) {\n  return isValidSuiAddress(value);\n}\nfunction parseTypeTag(type) {\n  if (!type.includes(\"::\")) return type;\n  return parseStructTag(type);\n}\nfunction parseStructTag(type) {\n  const [address, module] = type.split(\"::\");\n  const isMvrPackage = isValidNamedPackage(address);\n  const rest = type.slice(address.length + module.length + 4);\n  const name = rest.includes(\"<\") ? rest.slice(0, rest.indexOf(\"<\")) : rest;\n  const typeParams = rest.includes(\"<\") ? splitGenericParameters(rest.slice(rest.indexOf(\"<\") + 1, rest.lastIndexOf(\">\"))).map(\n    (typeParam) => parseTypeTag(typeParam.trim())\n  ) : [];\n  return {\n    address: isMvrPackage ? address : normalizeSuiAddress(address),\n    module,\n    name,\n    typeParams\n  };\n}\nfunction normalizeStructTag(type) {\n  const { address, module, name, typeParams } = typeof type === \"string\" ? parseStructTag(type) : type;\n  const formattedTypeParams = typeParams?.length > 0 ? `<${typeParams.map(\n    (typeParam) => typeof typeParam === \"string\" ? typeParam : normalizeStructTag(typeParam)\n  ).join(\",\")}>` : \"\";\n  return `${address}::${module}::${name}${formattedTypeParams}`;\n}\nfunction normalizeSuiAddress(value, forceAdd0x = false) {\n  let address = value.toLowerCase();\n  if (!forceAdd0x && address.startsWith(\"0x\")) {\n    address = address.slice(2);\n  }\n  return `0x${address.padStart(SUI_ADDRESS_LENGTH * 2, \"0\")}`;\n}\nfunction normalizeSuiObjectId(value, forceAdd0x = false) {\n  return normalizeSuiAddress(value, forceAdd0x);\n}\nfunction isHex(value) {\n  return /^(0x|0X)?[a-fA-F0-9]+$/.test(value) && value.length % 2 === 0;\n}\nfunction getHexByteLength(value) {\n  return /^(0x|0X)/.test(value) ? (value.length - 2) / 2 : value.length / 2;\n}\nexport {\n  SUI_ADDRESS_LENGTH,\n  isValidSuiAddress,\n  isValidSuiObjectId,\n  isValidTransactionDigest,\n  normalizeStructTag,\n  normalizeSuiAddress,\n  normalizeSuiObjectId,\n  parseStructTag\n};\n\n", "import { normalizeSuiObjectId } from \"./sui-types.js\";\nconst SUI_DECIMALS = 9;\nconst MIST_PER_SUI = BigInt(1e9);\nconst MOVE_STDLIB_ADDRESS = \"0x1\";\nconst SUI_FRAMEWORK_ADDRESS = \"0x2\";\nconst SUI_SYSTEM_ADDRESS = \"0x3\";\nconst SUI_CLOCK_OBJECT_ID = normalizeSuiObjectId(\"0x6\");\nconst SUI_SYSTEM_MODULE_NAME = \"sui_system\";\nconst SUI_TYPE_ARG = `${SUI_FRAMEWORK_ADDRESS}::sui::SUI`;\nconst SUI_SYSTEM_STATE_OBJECT_ID = normalizeSuiObjectId(\"0x5\");\nconst SUI_RANDOM_OBJECT_ID = normalizeSuiObjectId(\"0x8\");\nexport {\n  MIST_PER_SUI,\n  MOVE_STDLIB_ADDRESS,\n  SUI_CLOCK_OBJECT_ID,\n  SUI_DECIMALS,\n  SUI_FRAMEWORK_ADDRESS,\n  SUI_RANDOM_OBJECT_ID,\n  SUI_SYSTEM_ADDRESS,\n  SUI_SYSTEM_MODULE_NAME,\n  SUI_SYSTEM_STATE_OBJECT_ID,\n  SUI_TYPE_ARG\n};\n\n", "export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n", "/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n/** Asserts something is positive integer. */\nexport function anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error('positive integer expected, got ' + n);\n}\n/** Asserts something is Uint8Array. */\nexport function abytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n/** Asserts something is hash */\nexport function ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.createHasher');\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\n/** Asserts a hash instance has not been destroyed / finished */\nexport function aexists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\n/** Asserts output is properly-sized byte array */\nexport function aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n}\n/** Cast u8 / u16 / u32 to u8. */\nexport function u8(arr) {\n    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** Cast u8 / u16 / u32 to u32. */\nexport function u32(arr) {\n    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\nexport function clean(...arrays) {\n    for (let i = 0; i < arrays.length; i++) {\n        arrays[i].fill(0);\n    }\n}\n/** Create DataView of an array for easy byte-level manipulation. */\nexport function createView(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word, shift) {\n    return (word << (32 - shift)) | (word >>> shift);\n}\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word, shift) {\n    return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n/** The byte swap operation for uint32 */\nexport function byteSwap(word) {\n    return (((word << 24) & 0xff000000) |\n        ((word << 8) & 0xff0000) |\n        ((word >>> 8) & 0xff00) |\n        ((word >>> 24) & 0xff));\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const swap8IfBE = isLE\n    ? (n) => n\n    : (n) => byteSwap(n);\n/** @deprecated */\nexport const byteSwapIfBE = swap8IfBE;\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n    return arr;\n}\nexport const swap32IfBE = isLE\n    ? (u) => u\n    : byteSwap32;\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin = /* @__PURE__ */ (() => \n// @ts-ignore\ntypeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return bytes.toHex();\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return Uint8Array.fromHex(hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async () => { };\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // Uint8Array.from([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\nexport function bytesToUtf8(bytes) {\n    return new TextDecoder().decode(bytes);\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Helper for KDFs: consumes uint8array or string.\n * When string is passed, does utf8 decoding, using TextDecoder.\n */\nexport function kdfInputToBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/** Copies several Uint8Arrays into one. */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n        throw new Error('options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\n/** For runtime check if class implements interface */\nexport class Hash {\n}\n/** Wraps hash function, creating an interface on top of it */\nexport function createHasher(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function createOptHasher(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function createXOFer(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport const wrapConstructor = createHasher;\nexport const wrapConstructorWithOpts = createOptHasher;\nexport const wrapXOFConstructorWithOpts = createXOFer;\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    // Legacy Node.js compatibility\n    if (crypto && typeof crypto.randomBytes === 'function') {\n        return Uint8Array.from(crypto.randomBytes(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n", "/**\n * Internal helpers for blake hash.\n * @module\n */\nimport { rotr } from \"./utils.js\";\n/**\n * Internal blake variable.\n * For BLAKE2b, the two extra permutations for rounds 10 and 11 are SIGMA[10..11] = SIGMA[0..1].\n */\n// prettier-ignore\nexport const BSIGMA = /* @__PURE__ */ Uint8Array.from([\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,\n    11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,\n    7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,\n    9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,\n    2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,\n    12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,\n    13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,\n    6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,\n    10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,\n    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n    14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,\n    // Blake1, unused in others\n    11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,\n    7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,\n    9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,\n    2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,\n]);\n// Mixing function G splitted in two halfs\nexport function G1s(a, b, c, d, x) {\n    a = (a + b + x) | 0;\n    d = rotr(d ^ a, 16);\n    c = (c + d) | 0;\n    b = rotr(b ^ c, 12);\n    return { a, b, c, d };\n}\nexport function G2s(a, b, c, d, x) {\n    a = (a + b + x) | 0;\n    d = rotr(d ^ a, 8);\n    c = (c + d) | 0;\n    b = rotr(b ^ c, 7);\n    return { a, b, c, d };\n}\n", "/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { Hash, abytes, aexists, aoutput, clean, createView, toBytes } from \"./utils.js\";\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/** Choice: a ? b : c */\nexport function Chi(a, b, c) {\n    return (a & b) ^ (~a & c);\n}\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a, b, c) {\n    return (a & b) ^ (a & c) ^ (b & c);\n}\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        aexists(this);\n        data = toBytes(data);\n        abytes(data);\n        const { view, buffer, blockLen } = this;\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        clean(this.buffer.subarray(pos));\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.destroyed = destroyed;\n        to.finished = finished;\n        to.length = length;\n        to.pos = pos;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n}\n/**\n * Initial SHA-2 state: fractional parts of square roots of first 16 primes 2..53.\n * Check out `test/misc/sha2-gen-iv.js` for recomputation guide.\n */\n/** Initial SHA256 state. Bits 0..32 of frac part of sqrt of primes 2..19 */\nexport const SHA256_IV = /* @__PURE__ */ Uint32Array.from([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,\n]);\n/** Initial SHA224 state. Bits 32..64 of frac part of sqrt of primes 23..53 */\nexport const SHA224_IV = /* @__PURE__ */ Uint32Array.from([\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4,\n]);\n/** Initial SHA384 state. Bits 0..64 of frac part of sqrt of primes 23..53 */\nexport const SHA384_IV = /* @__PURE__ */ Uint32Array.from([\n    0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4,\n]);\n/** Initial SHA512 state. Bits 0..64 of frac part of sqrt of primes 2..19 */\nexport const SHA512_IV = /* @__PURE__ */ Uint32Array.from([\n    0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179,\n]);\n", "/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    const len = lst.length;\n    let Ah = new Uint32Array(len);\n    let Al = new Uint32Array(len);\n    for (let i = 0; i < len; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { add, add3H, add3L, add4H, add4L, add5H, add5L, fromBig, rotlBH, rotlBL, rotlSH, rotlSL, rotr32H, rotr32L, rotrBH, rotrBL, rotrSH, rotrSL, shrSH, shrSL, split, toBig };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n", "/**\n * blake2b (64-bit) & blake2s (8 to 32-bit) hash functions.\n * b could have been faster, but there is no fast u64 in js, so s is 1.5x faster.\n * @module\n */\nimport { BSIGMA, G1s, G2s } from \"./_blake.js\";\nimport { SHA256_IV } from \"./_md.js\";\nimport * as u64 from \"./_u64.js\";\n// prettier-ignore\nimport { abytes, aexists, anumber, aoutput, clean, createOptHasher, Hash, swap32IfBE, swap8IfBE, toBytes, u32 } from \"./utils.js\";\n// Same as SHA512_IV, but swapped endianness: LE instead of BE. iv[1] is iv[0], etc.\nconst B2B_IV = /* @__PURE__ */ Uint32Array.from([\n    0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372, 0x5f1d36f1, 0xa54ff53a,\n    0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c, 0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19,\n]);\n// Temporary buffer\nconst BBUF = /* @__PURE__ */ new Uint32Array(32);\n// Mixing function G splitted in two halfs\nfunction G1b(a, b, c, d, msg, x) {\n    // NOTE: V is LE here\n    const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore\n    let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1]; // prettier-ignore\n    let Bl = BBUF[2 * b], Bh = BBUF[2 * b + 1]; // prettier-ignore\n    let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1]; // prettier-ignore\n    let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1]; // prettier-ignore\n    // v[a] = (v[a] + v[b] + x) | 0;\n    let ll = u64.add3L(Al, Bl, Xl);\n    Ah = u64.add3H(ll, Ah, Bh, Xh);\n    Al = ll | 0;\n    // v[d] = rotr(v[d] ^ v[a], 32)\n    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });\n    ({ Dh, Dl } = { Dh: u64.rotr32H(Dh, Dl), Dl: u64.rotr32L(Dh, Dl) });\n    // v[c] = (v[c] + v[d]) | 0;\n    ({ h: Ch, l: Cl } = u64.add(Ch, Cl, Dh, Dl));\n    // v[b] = rotr(v[b] ^ v[c], 24)\n    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });\n    ({ Bh, Bl } = { Bh: u64.rotrSH(Bh, Bl, 24), Bl: u64.rotrSL(Bh, Bl, 24) });\n    (BBUF[2 * a] = Al), (BBUF[2 * a + 1] = Ah);\n    (BBUF[2 * b] = Bl), (BBUF[2 * b + 1] = Bh);\n    (BBUF[2 * c] = Cl), (BBUF[2 * c + 1] = Ch);\n    (BBUF[2 * d] = Dl), (BBUF[2 * d + 1] = Dh);\n}\nfunction G2b(a, b, c, d, msg, x) {\n    // NOTE: V is LE here\n    const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore\n    let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1]; // prettier-ignore\n    let Bl = BBUF[2 * b], Bh = BBUF[2 * b + 1]; // prettier-ignore\n    let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1]; // prettier-ignore\n    let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1]; // prettier-ignore\n    // v[a] = (v[a] + v[b] + x) | 0;\n    let ll = u64.add3L(Al, Bl, Xl);\n    Ah = u64.add3H(ll, Ah, Bh, Xh);\n    Al = ll | 0;\n    // v[d] = rotr(v[d] ^ v[a], 16)\n    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });\n    ({ Dh, Dl } = { Dh: u64.rotrSH(Dh, Dl, 16), Dl: u64.rotrSL(Dh, Dl, 16) });\n    // v[c] = (v[c] + v[d]) | 0;\n    ({ h: Ch, l: Cl } = u64.add(Ch, Cl, Dh, Dl));\n    // v[b] = rotr(v[b] ^ v[c], 63)\n    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });\n    ({ Bh, Bl } = { Bh: u64.rotrBH(Bh, Bl, 63), Bl: u64.rotrBL(Bh, Bl, 63) });\n    (BBUF[2 * a] = Al), (BBUF[2 * a + 1] = Ah);\n    (BBUF[2 * b] = Bl), (BBUF[2 * b + 1] = Bh);\n    (BBUF[2 * c] = Cl), (BBUF[2 * c + 1] = Ch);\n    (BBUF[2 * d] = Dl), (BBUF[2 * d + 1] = Dh);\n}\nfunction checkBlake2Opts(outputLen, opts = {}, keyLen, saltLen, persLen) {\n    anumber(keyLen);\n    if (outputLen < 0 || outputLen > keyLen)\n        throw new Error('outputLen bigger than keyLen');\n    const { key, salt, personalization } = opts;\n    if (key !== undefined && (key.length < 1 || key.length > keyLen))\n        throw new Error('key length must be undefined or 1..' + keyLen);\n    if (salt !== undefined && salt.length !== saltLen)\n        throw new Error('salt must be undefined or ' + saltLen);\n    if (personalization !== undefined && personalization.length !== persLen)\n        throw new Error('personalization must be undefined or ' + persLen);\n}\n/** Class, from which others are subclassed. */\nexport class BLAKE2 extends Hash {\n    constructor(blockLen, outputLen) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        this.length = 0;\n        this.pos = 0;\n        anumber(blockLen);\n        anumber(outputLen);\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.buffer = new Uint8Array(blockLen);\n        this.buffer32 = u32(this.buffer);\n    }\n    update(data) {\n        aexists(this);\n        data = toBytes(data);\n        abytes(data);\n        // Main difference with other hashes: there is flag for last block,\n        // so we cannot process current block before we know that there\n        // is the next one. This significantly complicates logic and reduces ability\n        // to do zero-copy processing\n        const { blockLen, buffer, buffer32 } = this;\n        const len = data.length;\n        const offset = data.byteOffset;\n        const buf = data.buffer;\n        for (let pos = 0; pos < len;) {\n            // If buffer is full and we still have input (don't process last block, same as blake2s)\n            if (this.pos === blockLen) {\n                swap32IfBE(buffer32);\n                this.compress(buffer32, 0, false);\n                swap32IfBE(buffer32);\n                this.pos = 0;\n            }\n            const take = Math.min(blockLen - this.pos, len - pos);\n            const dataOffset = offset + pos;\n            // full block && aligned to 4 bytes && not last in input\n            if (take === blockLen && !(dataOffset % 4) && pos + take < len) {\n                const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));\n                swap32IfBE(data32);\n                for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {\n                    this.length += blockLen;\n                    this.compress(data32, pos32, false);\n                }\n                swap32IfBE(data32);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            this.length += take;\n            pos += take;\n        }\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        const { pos, buffer32 } = this;\n        this.finished = true;\n        // Padding\n        clean(this.buffer.subarray(pos));\n        swap32IfBE(buffer32);\n        this.compress(buffer32, 0, true);\n        swap32IfBE(buffer32);\n        const out32 = u32(out);\n        this.get().forEach((v, i) => (out32[i] = swap8IfBE(v)));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        const { buffer, length, finished, destroyed, outputLen, pos } = this;\n        to || (to = new this.constructor({ dkLen: outputLen }));\n        to.set(...this.get());\n        to.buffer.set(buffer);\n        to.destroyed = destroyed;\n        to.finished = finished;\n        to.length = length;\n        to.pos = pos;\n        // @ts-ignore\n        to.outputLen = outputLen;\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n}\nexport class BLAKE2b extends BLAKE2 {\n    constructor(opts = {}) {\n        const olen = opts.dkLen === undefined ? 64 : opts.dkLen;\n        super(128, olen);\n        // Same as SHA-512, but LE\n        this.v0l = B2B_IV[0] | 0;\n        this.v0h = B2B_IV[1] | 0;\n        this.v1l = B2B_IV[2] | 0;\n        this.v1h = B2B_IV[3] | 0;\n        this.v2l = B2B_IV[4] | 0;\n        this.v2h = B2B_IV[5] | 0;\n        this.v3l = B2B_IV[6] | 0;\n        this.v3h = B2B_IV[7] | 0;\n        this.v4l = B2B_IV[8] | 0;\n        this.v4h = B2B_IV[9] | 0;\n        this.v5l = B2B_IV[10] | 0;\n        this.v5h = B2B_IV[11] | 0;\n        this.v6l = B2B_IV[12] | 0;\n        this.v6h = B2B_IV[13] | 0;\n        this.v7l = B2B_IV[14] | 0;\n        this.v7h = B2B_IV[15] | 0;\n        checkBlake2Opts(olen, opts, 64, 16, 16);\n        let { key, personalization, salt } = opts;\n        let keyLength = 0;\n        if (key !== undefined) {\n            key = toBytes(key);\n            keyLength = key.length;\n        }\n        this.v0l ^= this.outputLen | (keyLength << 8) | (0x01 << 16) | (0x01 << 24);\n        if (salt !== undefined) {\n            salt = toBytes(salt);\n            const slt = u32(salt);\n            this.v4l ^= swap8IfBE(slt[0]);\n            this.v4h ^= swap8IfBE(slt[1]);\n            this.v5l ^= swap8IfBE(slt[2]);\n            this.v5h ^= swap8IfBE(slt[3]);\n        }\n        if (personalization !== undefined) {\n            personalization = toBytes(personalization);\n            const pers = u32(personalization);\n            this.v6l ^= swap8IfBE(pers[0]);\n            this.v6h ^= swap8IfBE(pers[1]);\n            this.v7l ^= swap8IfBE(pers[2]);\n            this.v7h ^= swap8IfBE(pers[3]);\n        }\n        if (key !== undefined) {\n            // Pad to blockLen and update\n            const tmp = new Uint8Array(this.blockLen);\n            tmp.set(key);\n            this.update(tmp);\n        }\n    }\n    // prettier-ignore\n    get() {\n        let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;\n        return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];\n    }\n    // prettier-ignore\n    set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {\n        this.v0l = v0l | 0;\n        this.v0h = v0h | 0;\n        this.v1l = v1l | 0;\n        this.v1h = v1h | 0;\n        this.v2l = v2l | 0;\n        this.v2h = v2h | 0;\n        this.v3l = v3l | 0;\n        this.v3h = v3h | 0;\n        this.v4l = v4l | 0;\n        this.v4h = v4h | 0;\n        this.v5l = v5l | 0;\n        this.v5h = v5h | 0;\n        this.v6l = v6l | 0;\n        this.v6h = v6h | 0;\n        this.v7l = v7l | 0;\n        this.v7h = v7h | 0;\n    }\n    compress(msg, offset, isLast) {\n        this.get().forEach((v, i) => (BBUF[i] = v)); // First half from state.\n        BBUF.set(B2B_IV, 16); // Second half from IV.\n        let { h, l } = u64.fromBig(BigInt(this.length));\n        BBUF[24] = B2B_IV[8] ^ l; // Low word of the offset.\n        BBUF[25] = B2B_IV[9] ^ h; // High word.\n        // Invert all bits for last block\n        if (isLast) {\n            BBUF[28] = ~BBUF[28];\n            BBUF[29] = ~BBUF[29];\n        }\n        let j = 0;\n        const s = BSIGMA;\n        for (let i = 0; i < 12; i++) {\n            G1b(0, 4, 8, 12, msg, offset + 2 * s[j++]);\n            G2b(0, 4, 8, 12, msg, offset + 2 * s[j++]);\n            G1b(1, 5, 9, 13, msg, offset + 2 * s[j++]);\n            G2b(1, 5, 9, 13, msg, offset + 2 * s[j++]);\n            G1b(2, 6, 10, 14, msg, offset + 2 * s[j++]);\n            G2b(2, 6, 10, 14, msg, offset + 2 * s[j++]);\n            G1b(3, 7, 11, 15, msg, offset + 2 * s[j++]);\n            G2b(3, 7, 11, 15, msg, offset + 2 * s[j++]);\n            G1b(0, 5, 10, 15, msg, offset + 2 * s[j++]);\n            G2b(0, 5, 10, 15, msg, offset + 2 * s[j++]);\n            G1b(1, 6, 11, 12, msg, offset + 2 * s[j++]);\n            G2b(1, 6, 11, 12, msg, offset + 2 * s[j++]);\n            G1b(2, 7, 8, 13, msg, offset + 2 * s[j++]);\n            G2b(2, 7, 8, 13, msg, offset + 2 * s[j++]);\n            G1b(3, 4, 9, 14, msg, offset + 2 * s[j++]);\n            G2b(3, 4, 9, 14, msg, offset + 2 * s[j++]);\n        }\n        this.v0l ^= BBUF[0] ^ BBUF[16];\n        this.v0h ^= BBUF[1] ^ BBUF[17];\n        this.v1l ^= BBUF[2] ^ BBUF[18];\n        this.v1h ^= BBUF[3] ^ BBUF[19];\n        this.v2l ^= BBUF[4] ^ BBUF[20];\n        this.v2h ^= BBUF[5] ^ BBUF[21];\n        this.v3l ^= BBUF[6] ^ BBUF[22];\n        this.v3h ^= BBUF[7] ^ BBUF[23];\n        this.v4l ^= BBUF[8] ^ BBUF[24];\n        this.v4h ^= BBUF[9] ^ BBUF[25];\n        this.v5l ^= BBUF[10] ^ BBUF[26];\n        this.v5h ^= BBUF[11] ^ BBUF[27];\n        this.v6l ^= BBUF[12] ^ BBUF[28];\n        this.v6h ^= BBUF[13] ^ BBUF[29];\n        this.v7l ^= BBUF[14] ^ BBUF[30];\n        this.v7h ^= BBUF[15] ^ BBUF[31];\n        clean(BBUF);\n    }\n    destroy() {\n        this.destroyed = true;\n        clean(this.buffer32);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\n/**\n * Blake2b hash function. 64-bit. 1.5x slower than blake2s in JS.\n * @param msg - message that would be hashed\n * @param opts - dkLen output length, key for MAC mode, salt, personalization\n */\nexport const blake2b = /* @__PURE__ */ createOptHasher((opts) => new BLAKE2b(opts));\n// prettier-ignore\nexport function compress(s, offset, msg, rounds, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15) {\n    let j = 0;\n    for (let i = 0; i < rounds; i++) {\n        ({ a: v0, b: v4, c: v8, d: v12 } = G1s(v0, v4, v8, v12, msg[offset + s[j++]]));\n        ({ a: v0, b: v4, c: v8, d: v12 } = G2s(v0, v4, v8, v12, msg[offset + s[j++]]));\n        ({ a: v1, b: v5, c: v9, d: v13 } = G1s(v1, v5, v9, v13, msg[offset + s[j++]]));\n        ({ a: v1, b: v5, c: v9, d: v13 } = G2s(v1, v5, v9, v13, msg[offset + s[j++]]));\n        ({ a: v2, b: v6, c: v10, d: v14 } = G1s(v2, v6, v10, v14, msg[offset + s[j++]]));\n        ({ a: v2, b: v6, c: v10, d: v14 } = G2s(v2, v6, v10, v14, msg[offset + s[j++]]));\n        ({ a: v3, b: v7, c: v11, d: v15 } = G1s(v3, v7, v11, v15, msg[offset + s[j++]]));\n        ({ a: v3, b: v7, c: v11, d: v15 } = G2s(v3, v7, v11, v15, msg[offset + s[j++]]));\n        ({ a: v0, b: v5, c: v10, d: v15 } = G1s(v0, v5, v10, v15, msg[offset + s[j++]]));\n        ({ a: v0, b: v5, c: v10, d: v15 } = G2s(v0, v5, v10, v15, msg[offset + s[j++]]));\n        ({ a: v1, b: v6, c: v11, d: v12 } = G1s(v1, v6, v11, v12, msg[offset + s[j++]]));\n        ({ a: v1, b: v6, c: v11, d: v12 } = G2s(v1, v6, v11, v12, msg[offset + s[j++]]));\n        ({ a: v2, b: v7, c: v8, d: v13 } = G1s(v2, v7, v8, v13, msg[offset + s[j++]]));\n        ({ a: v2, b: v7, c: v8, d: v13 } = G2s(v2, v7, v8, v13, msg[offset + s[j++]]));\n        ({ a: v3, b: v4, c: v9, d: v14 } = G1s(v3, v4, v9, v14, msg[offset + s[j++]]));\n        ({ a: v3, b: v4, c: v9, d: v14 } = G2s(v3, v4, v9, v14, msg[offset + s[j++]]));\n    }\n    return { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 };\n}\nconst B2S_IV = SHA256_IV;\nexport class BLAKE2s extends BLAKE2 {\n    constructor(opts = {}) {\n        const olen = opts.dkLen === undefined ? 32 : opts.dkLen;\n        super(64, olen);\n        // Internal state, same as SHA-256\n        this.v0 = B2S_IV[0] | 0;\n        this.v1 = B2S_IV[1] | 0;\n        this.v2 = B2S_IV[2] | 0;\n        this.v3 = B2S_IV[3] | 0;\n        this.v4 = B2S_IV[4] | 0;\n        this.v5 = B2S_IV[5] | 0;\n        this.v6 = B2S_IV[6] | 0;\n        this.v7 = B2S_IV[7] | 0;\n        checkBlake2Opts(olen, opts, 32, 8, 8);\n        let { key, personalization, salt } = opts;\n        let keyLength = 0;\n        if (key !== undefined) {\n            key = toBytes(key);\n            keyLength = key.length;\n        }\n        this.v0 ^= this.outputLen | (keyLength << 8) | (0x01 << 16) | (0x01 << 24);\n        if (salt !== undefined) {\n            salt = toBytes(salt);\n            const slt = u32(salt);\n            this.v4 ^= swap8IfBE(slt[0]);\n            this.v5 ^= swap8IfBE(slt[1]);\n        }\n        if (personalization !== undefined) {\n            personalization = toBytes(personalization);\n            const pers = u32(personalization);\n            this.v6 ^= swap8IfBE(pers[0]);\n            this.v7 ^= swap8IfBE(pers[1]);\n        }\n        if (key !== undefined) {\n            // Pad to blockLen and update\n            abytes(key);\n            const tmp = new Uint8Array(this.blockLen);\n            tmp.set(key);\n            this.update(tmp);\n        }\n    }\n    get() {\n        const { v0, v1, v2, v3, v4, v5, v6, v7 } = this;\n        return [v0, v1, v2, v3, v4, v5, v6, v7];\n    }\n    // prettier-ignore\n    set(v0, v1, v2, v3, v4, v5, v6, v7) {\n        this.v0 = v0 | 0;\n        this.v1 = v1 | 0;\n        this.v2 = v2 | 0;\n        this.v3 = v3 | 0;\n        this.v4 = v4 | 0;\n        this.v5 = v5 | 0;\n        this.v6 = v6 | 0;\n        this.v7 = v7 | 0;\n    }\n    compress(msg, offset, isLast) {\n        const { h, l } = u64.fromBig(BigInt(this.length));\n        // prettier-ignore\n        const { v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 } = compress(BSIGMA, offset, msg, 10, this.v0, this.v1, this.v2, this.v3, this.v4, this.v5, this.v6, this.v7, B2S_IV[0], B2S_IV[1], B2S_IV[2], B2S_IV[3], l ^ B2S_IV[4], h ^ B2S_IV[5], isLast ? ~B2S_IV[6] : B2S_IV[6], B2S_IV[7]);\n        this.v0 ^= v0 ^ v8;\n        this.v1 ^= v1 ^ v9;\n        this.v2 ^= v2 ^ v10;\n        this.v3 ^= v3 ^ v11;\n        this.v4 ^= v4 ^ v12;\n        this.v5 ^= v5 ^ v13;\n        this.v6 ^= v6 ^ v14;\n        this.v7 ^= v7 ^ v15;\n    }\n    destroy() {\n        this.destroyed = true;\n        clean(this.buffer32);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\n/**\n * Blake2s hash function. Focuses on 8-bit to 32-bit platforms. 1.5x faster than blake2b in JS.\n * @param msg - message that would be hashed\n * @param opts - dkLen output length, key for MAC mode, salt, personalization\n */\nexport const blake2s = /* @__PURE__ */ createOptHasher((opts) => new BLAKE2s(opts));\n", "/**\n * Blake2b hash function. Focuses on 64-bit platforms, but in JS speed different from Blake2s is negligible.\n * @module\n * @deprecated\n */\nimport { BLAKE2b as B2B, blake2b as b2b } from \"./blake2.js\";\n/** @deprecated Use import from `noble/hashes/blake2` module */\nexport const BLAKE2b = B2B;\n/** @deprecated Use import from `noble/hashes/blake2` module */\nexport const blake2b = b2b;\n", "import { splitGenericParameters } from \"@mysten/bcs\";\nimport { normalizeSuiAddress } from \"../utils/sui-types.js\";\nconst VECTOR_REGEX = /^vector<(.+)>$/;\nconst STRUCT_REGEX = /^([^:]+)::([^:]+)::([^<]+)(<(.+)>)?/;\nclass TypeTagSerializer {\n  static parseFromStr(str, normalizeAddress = false) {\n    if (str === \"address\") {\n      return { address: null };\n    } else if (str === \"bool\") {\n      return { bool: null };\n    } else if (str === \"u8\") {\n      return { u8: null };\n    } else if (str === \"u16\") {\n      return { u16: null };\n    } else if (str === \"u32\") {\n      return { u32: null };\n    } else if (str === \"u64\") {\n      return { u64: null };\n    } else if (str === \"u128\") {\n      return { u128: null };\n    } else if (str === \"u256\") {\n      return { u256: null };\n    } else if (str === \"signer\") {\n      return { signer: null };\n    }\n    const vectorMatch = str.match(VECTOR_REGEX);\n    if (vectorMatch) {\n      return {\n        vector: TypeTagSerializer.parseFromStr(vectorMatch[1], normalizeAddress)\n      };\n    }\n    const structMatch = str.match(STRUCT_REGEX);\n    if (structMatch) {\n      const address = normalizeAddress ? normalizeSuiAddress(structMatch[1]) : structMatch[1];\n      return {\n        struct: {\n          address,\n          module: structMatch[2],\n          name: structMatch[3],\n          typeParams: structMatch[5] === void 0 ? [] : TypeTagSerializer.parseStructTypeArgs(structMatch[5], normalizeAddress)\n        }\n      };\n    }\n    throw new Error(`Encountered unexpected token when parsing type args for ${str}`);\n  }\n  static parseStructTypeArgs(str, normalizeAddress = false) {\n    return splitGenericParameters(str).map(\n      (tok) => TypeTagSerializer.parseFromStr(tok, normalizeAddress)\n    );\n  }\n  static tagToString(tag) {\n    if (\"bool\" in tag) {\n      return \"bool\";\n    }\n    if (\"u8\" in tag) {\n      return \"u8\";\n    }\n    if (\"u16\" in tag) {\n      return \"u16\";\n    }\n    if (\"u32\" in tag) {\n      return \"u32\";\n    }\n    if (\"u64\" in tag) {\n      return \"u64\";\n    }\n    if (\"u128\" in tag) {\n      return \"u128\";\n    }\n    if (\"u256\" in tag) {\n      return \"u256\";\n    }\n    if (\"address\" in tag) {\n      return \"address\";\n    }\n    if (\"signer\" in tag) {\n      return \"signer\";\n    }\n    if (\"vector\" in tag) {\n      return `vector<${TypeTagSerializer.tagToString(tag.vector)}>`;\n    }\n    if (\"struct\" in tag) {\n      const struct = tag.struct;\n      const typeParams = struct.typeParams.map(TypeTagSerializer.tagToString).join(\", \");\n      return `${struct.address}::${struct.module}::${struct.name}${typeParams ? `<${typeParams}>` : \"\"}`;\n    }\n    throw new Error(\"Invalid TypeTag\");\n  }\n}\nfunction normalizeTypeTag(type) {\n  return TypeTagSerializer.tagToString(TypeTagSerializer.parseFromStr(type));\n}\nexport {\n  TypeTagSerializer,\n  normalizeTypeTag\n};\n\n", "import { bcs, fromBase58, fromBase64, fromHex, toBase58, toBase64, toHex } from \"@mysten/bcs\";\nimport { isValidSuiAddress, normalizeSuiAddress, SUI_ADDRESS_LENGTH } from \"../utils/sui-types.js\";\nimport { TypeTagSerializer } from \"./type-tag-serializer.js\";\nfunction unsafe_u64(options) {\n  return bcs.u64({\n    name: \"unsafe_u64\",\n    ...options\n  }).transform({\n    input: (val) => val,\n    output: (val) => Number(val)\n  });\n}\nfunction optionEnum(type) {\n  return bcs.enum(\"Option\", {\n    None: null,\n    Some: type\n  });\n}\nconst Address = bcs.bytes(SUI_ADDRESS_LENGTH).transform({\n  validate: (val) => {\n    const address = typeof val === \"string\" ? val : toHex(val);\n    if (!address || !isValidSuiAddress(normalizeSuiAddress(address))) {\n      throw new Error(`Invalid Sui address ${address}`);\n    }\n  },\n  input: (val) => typeof val === \"string\" ? fromHex(normalizeSuiAddress(val)) : val,\n  output: (val) => normalizeSuiAddress(toHex(val))\n});\nconst ObjectDigest = bcs.byteVector().transform({\n  name: \"ObjectDigest\",\n  input: (value) => fromBase58(value),\n  output: (value) => toBase58(new Uint8Array(value)),\n  validate: (value) => {\n    if (fromBase58(value).length !== 32) {\n      throw new Error(\"ObjectDigest must be 32 bytes\");\n    }\n  }\n});\nconst SuiObjectRef = bcs.struct(\"SuiObjectRef\", {\n  objectId: Address,\n  version: bcs.u64(),\n  digest: ObjectDigest\n});\nconst SharedObjectRef = bcs.struct(\"SharedObjectRef\", {\n  objectId: Address,\n  initialSharedVersion: bcs.u64(),\n  mutable: bcs.bool()\n});\nconst ObjectArg = bcs.enum(\"ObjectArg\", {\n  ImmOrOwnedObject: SuiObjectRef,\n  SharedObject: SharedObjectRef,\n  Receiving: SuiObjectRef\n});\nconst Owner = bcs.enum(\"Owner\", {\n  AddressOwner: Address,\n  ObjectOwner: Address,\n  Shared: bcs.struct(\"Shared\", {\n    initialSharedVersion: bcs.u64()\n  }),\n  Immutable: null,\n  ConsensusAddressOwner: bcs.struct(\"ConsensusAddressOwner\", {\n    owner: Address,\n    startVersion: bcs.u64()\n  })\n});\nconst CallArg = bcs.enum(\"CallArg\", {\n  Pure: bcs.struct(\"Pure\", {\n    bytes: bcs.byteVector().transform({\n      input: (val) => typeof val === \"string\" ? fromBase64(val) : val,\n      output: (val) => toBase64(new Uint8Array(val))\n    })\n  }),\n  Object: ObjectArg\n});\nconst InnerTypeTag = bcs.enum(\"TypeTag\", {\n  bool: null,\n  u8: null,\n  u64: null,\n  u128: null,\n  address: null,\n  signer: null,\n  vector: bcs.lazy(() => InnerTypeTag),\n  struct: bcs.lazy(() => StructTag),\n  u16: null,\n  u32: null,\n  u256: null\n});\nconst TypeTag = InnerTypeTag.transform({\n  input: (typeTag) => typeof typeTag === \"string\" ? TypeTagSerializer.parseFromStr(typeTag, true) : typeTag,\n  output: (typeTag) => TypeTagSerializer.tagToString(typeTag)\n});\nconst Argument = bcs.enum(\"Argument\", {\n  GasCoin: null,\n  Input: bcs.u16(),\n  Result: bcs.u16(),\n  NestedResult: bcs.tuple([bcs.u16(), bcs.u16()])\n});\nconst ProgrammableMoveCall = bcs.struct(\"ProgrammableMoveCall\", {\n  package: Address,\n  module: bcs.string(),\n  function: bcs.string(),\n  typeArguments: bcs.vector(TypeTag),\n  arguments: bcs.vector(Argument)\n});\nconst Command = bcs.enum(\"Command\", {\n  /**\n   * A Move Call - any public Move function can be called via\n   * this transaction. The results can be used that instant to pass\n   * into the next transaction.\n   */\n  MoveCall: ProgrammableMoveCall,\n  /**\n   * Transfer vector of objects to a receiver.\n   */\n  TransferObjects: bcs.struct(\"TransferObjects\", {\n    objects: bcs.vector(Argument),\n    address: Argument\n  }),\n  // /**\n  //  * Split `amount` from a `coin`.\n  //  */\n  SplitCoins: bcs.struct(\"SplitCoins\", {\n    coin: Argument,\n    amounts: bcs.vector(Argument)\n  }),\n  // /**\n  //  * Merge Vector of Coins (`sources`) into a `destination`.\n  //  */\n  MergeCoins: bcs.struct(\"MergeCoins\", {\n    destination: Argument,\n    sources: bcs.vector(Argument)\n  }),\n  // /**\n  //  * Publish a Move module.\n  //  */\n  Publish: bcs.struct(\"Publish\", {\n    modules: bcs.vector(\n      bcs.byteVector().transform({\n        input: (val) => typeof val === \"string\" ? fromBase64(val) : val,\n        output: (val) => toBase64(new Uint8Array(val))\n      })\n    ),\n    dependencies: bcs.vector(Address)\n  }),\n  // /**\n  //  * Build a vector of objects using the input arguments.\n  //  * It is impossible to export construct a `vector<T: key>` otherwise,\n  //  * so this call serves a utility function.\n  //  */\n  MakeMoveVec: bcs.struct(\"MakeMoveVec\", {\n    type: optionEnum(TypeTag).transform({\n      input: (val) => val === null ? {\n        None: true\n      } : {\n        Some: val\n      },\n      output: (val) => val.Some ?? null\n    }),\n    elements: bcs.vector(Argument)\n  }),\n  Upgrade: bcs.struct(\"Upgrade\", {\n    modules: bcs.vector(\n      bcs.byteVector().transform({\n        input: (val) => typeof val === \"string\" ? fromBase64(val) : val,\n        output: (val) => toBase64(new Uint8Array(val))\n      })\n    ),\n    dependencies: bcs.vector(Address),\n    package: Address,\n    ticket: Argument\n  })\n});\nconst ProgrammableTransaction = bcs.struct(\"ProgrammableTransaction\", {\n  inputs: bcs.vector(CallArg),\n  commands: bcs.vector(Command)\n});\nconst TransactionKind = bcs.enum(\"TransactionKind\", {\n  ProgrammableTransaction,\n  ChangeEpoch: null,\n  Genesis: null,\n  ConsensusCommitPrologue: null\n});\nconst TransactionExpiration = bcs.enum(\"TransactionExpiration\", {\n  None: null,\n  Epoch: unsafe_u64()\n});\nconst StructTag = bcs.struct(\"StructTag\", {\n  address: Address,\n  module: bcs.string(),\n  name: bcs.string(),\n  typeParams: bcs.vector(InnerTypeTag)\n});\nconst GasData = bcs.struct(\"GasData\", {\n  payment: bcs.vector(SuiObjectRef),\n  owner: Address,\n  price: bcs.u64(),\n  budget: bcs.u64()\n});\nconst TransactionDataV1 = bcs.struct(\"TransactionDataV1\", {\n  kind: TransactionKind,\n  sender: Address,\n  gasData: GasData,\n  expiration: TransactionExpiration\n});\nconst TransactionData = bcs.enum(\"TransactionData\", {\n  V1: TransactionDataV1\n});\nconst IntentScope = bcs.enum(\"IntentScope\", {\n  TransactionData: null,\n  TransactionEffects: null,\n  CheckpointSummary: null,\n  PersonalMessage: null\n});\nconst IntentVersion = bcs.enum(\"IntentVersion\", {\n  V0: null\n});\nconst AppId = bcs.enum(\"AppId\", {\n  Sui: null\n});\nconst Intent = bcs.struct(\"Intent\", {\n  scope: IntentScope,\n  version: IntentVersion,\n  appId: AppId\n});\nfunction IntentMessage(T) {\n  return bcs.struct(`IntentMessage<${T.name}>`, {\n    intent: Intent,\n    value: T\n  });\n}\nconst CompressedSignature = bcs.enum(\"CompressedSignature\", {\n  ED25519: bcs.bytes(64),\n  Secp256k1: bcs.bytes(64),\n  Secp256r1: bcs.bytes(64),\n  ZkLogin: bcs.byteVector(),\n  Passkey: bcs.byteVector()\n});\nconst PublicKey = bcs.enum(\"PublicKey\", {\n  ED25519: bcs.bytes(32),\n  Secp256k1: bcs.bytes(33),\n  Secp256r1: bcs.bytes(33),\n  ZkLogin: bcs.byteVector(),\n  Passkey: bcs.bytes(33)\n});\nconst MultiSigPkMap = bcs.struct(\"MultiSigPkMap\", {\n  pubKey: PublicKey,\n  weight: bcs.u8()\n});\nconst MultiSigPublicKey = bcs.struct(\"MultiSigPublicKey\", {\n  pk_map: bcs.vector(MultiSigPkMap),\n  threshold: bcs.u16()\n});\nconst MultiSig = bcs.struct(\"MultiSig\", {\n  sigs: bcs.vector(CompressedSignature),\n  bitmap: bcs.u16(),\n  multisig_pk: MultiSigPublicKey\n});\nconst base64String = bcs.byteVector().transform({\n  input: (val) => typeof val === \"string\" ? fromBase64(val) : val,\n  output: (val) => toBase64(new Uint8Array(val))\n});\nconst SenderSignedTransaction = bcs.struct(\"SenderSignedTransaction\", {\n  intentMessage: IntentMessage(TransactionData),\n  txSignatures: bcs.vector(base64String)\n});\nconst SenderSignedData = bcs.vector(SenderSignedTransaction, {\n  name: \"SenderSignedData\"\n});\nconst PasskeyAuthenticator = bcs.struct(\"PasskeyAuthenticator\", {\n  authenticatorData: bcs.byteVector(),\n  clientDataJson: bcs.string(),\n  userSignature: bcs.byteVector()\n});\nexport {\n  Address,\n  AppId,\n  Argument,\n  CallArg,\n  Command,\n  CompressedSignature,\n  GasData,\n  Intent,\n  IntentMessage,\n  IntentScope,\n  IntentVersion,\n  MultiSig,\n  MultiSigPkMap,\n  MultiSigPublicKey,\n  ObjectArg,\n  ObjectDigest,\n  Owner,\n  PasskeyAuthenticator,\n  ProgrammableMoveCall,\n  ProgrammableTransaction,\n  PublicKey,\n  SenderSignedData,\n  SenderSignedTransaction,\n  SharedObjectRef,\n  StructTag,\n  SuiObjectRef,\n  TransactionData,\n  TransactionDataV1,\n  TransactionExpiration,\n  TransactionKind,\n  TypeTag,\n  base64String\n};\n\n", "import { bcs } from \"@mysten/bcs\";\nimport { Address, ObjectDigest, Owner, SuiObjectRef } from \"./bcs.js\";\nconst PackageUpgradeError = bcs.enum(\"PackageUpgradeError\", {\n  UnableToFetchPackage: bcs.struct(\"UnableToFetchPackage\", { packageId: Address }),\n  NotAPackage: bcs.struct(\"NotAPackage\", { objectId: Address }),\n  IncompatibleUpgrade: null,\n  DigestDoesNotMatch: bcs.struct(\"DigestDoesNotMatch\", { digest: bcs.byteVector() }),\n  UnknownUpgradePolicy: bcs.struct(\"UnknownUpgradePolicy\", { policy: bcs.u8() }),\n  PackageIDDoesNotMatch: bcs.struct(\"PackageIDDoesNotMatch\", {\n    packageId: Address,\n    ticketId: Address\n  })\n});\nconst ModuleId = bcs.struct(\"ModuleId\", {\n  address: Address,\n  name: bcs.string()\n});\nconst MoveLocation = bcs.struct(\"MoveLocation\", {\n  module: ModuleId,\n  function: bcs.u16(),\n  instruction: bcs.u16(),\n  functionName: bcs.option(bcs.string())\n});\nconst CommandArgumentError = bcs.enum(\"CommandArgumentError\", {\n  TypeMismatch: null,\n  InvalidBCSBytes: null,\n  InvalidUsageOfPureArg: null,\n  InvalidArgumentToPrivateEntryFunction: null,\n  IndexOutOfBounds: bcs.struct(\"IndexOutOfBounds\", { idx: bcs.u16() }),\n  SecondaryIndexOutOfBounds: bcs.struct(\"SecondaryIndexOutOfBounds\", {\n    resultIdx: bcs.u16(),\n    secondaryIdx: bcs.u16()\n  }),\n  InvalidResultArity: bcs.struct(\"InvalidResultArity\", { resultIdx: bcs.u16() }),\n  InvalidGasCoinUsage: null,\n  InvalidValueUsage: null,\n  InvalidObjectByValue: null,\n  InvalidObjectByMutRef: null,\n  SharedObjectOperationNotAllowed: null\n});\nconst TypeArgumentError = bcs.enum(\"TypeArgumentError\", {\n  TypeNotFound: null,\n  ConstraintNotSatisfied: null\n});\nconst ExecutionFailureStatus = bcs.enum(\"ExecutionFailureStatus\", {\n  InsufficientGas: null,\n  InvalidGasObject: null,\n  InvariantViolation: null,\n  FeatureNotYetSupported: null,\n  MoveObjectTooBig: bcs.struct(\"MoveObjectTooBig\", {\n    objectSize: bcs.u64(),\n    maxObjectSize: bcs.u64()\n  }),\n  MovePackageTooBig: bcs.struct(\"MovePackageTooBig\", {\n    objectSize: bcs.u64(),\n    maxObjectSize: bcs.u64()\n  }),\n  CircularObjectOwnership: bcs.struct(\"CircularObjectOwnership\", { object: Address }),\n  InsufficientCoinBalance: null,\n  CoinBalanceOverflow: null,\n  PublishErrorNonZeroAddress: null,\n  SuiMoveVerificationError: null,\n  MovePrimitiveRuntimeError: bcs.option(MoveLocation),\n  MoveAbort: bcs.tuple([MoveLocation, bcs.u64()]),\n  VMVerificationOrDeserializationError: null,\n  VMInvariantViolation: null,\n  FunctionNotFound: null,\n  ArityMismatch: null,\n  TypeArityMismatch: null,\n  NonEntryFunctionInvoked: null,\n  CommandArgumentError: bcs.struct(\"CommandArgumentError\", {\n    argIdx: bcs.u16(),\n    kind: CommandArgumentError\n  }),\n  TypeArgumentError: bcs.struct(\"TypeArgumentError\", {\n    argumentIdx: bcs.u16(),\n    kind: TypeArgumentError\n  }),\n  UnusedValueWithoutDrop: bcs.struct(\"UnusedValueWithoutDrop\", {\n    resultIdx: bcs.u16(),\n    secondaryIdx: bcs.u16()\n  }),\n  InvalidPublicFunctionReturnType: bcs.struct(\"InvalidPublicFunctionReturnType\", {\n    idx: bcs.u16()\n  }),\n  InvalidTransferObject: null,\n  EffectsTooLarge: bcs.struct(\"EffectsTooLarge\", { currentSize: bcs.u64(), maxSize: bcs.u64() }),\n  PublishUpgradeMissingDependency: null,\n  PublishUpgradeDependencyDowngrade: null,\n  PackageUpgradeError: bcs.struct(\"PackageUpgradeError\", { upgradeError: PackageUpgradeError }),\n  WrittenObjectsTooLarge: bcs.struct(\"WrittenObjectsTooLarge\", {\n    currentSize: bcs.u64(),\n    maxSize: bcs.u64()\n  }),\n  CertificateDenied: null,\n  SuiMoveVerificationTimedout: null,\n  SharedObjectOperationNotAllowed: null,\n  InputObjectDeleted: null,\n  ExecutionCancelledDueToSharedObjectCongestion: bcs.struct(\n    \"ExecutionCancelledDueToSharedObjectCongestion\",\n    {\n      congestedObjects: bcs.vector(Address)\n    }\n  ),\n  AddressDeniedForCoin: bcs.struct(\"AddressDeniedForCoin\", {\n    address: Address,\n    coinType: bcs.string()\n  }),\n  CoinTypeGlobalPause: bcs.struct(\"CoinTypeGlobalPause\", { coinType: bcs.string() }),\n  ExecutionCancelledDueToRandomnessUnavailable: null\n});\nconst ExecutionStatus = bcs.enum(\"ExecutionStatus\", {\n  Success: null,\n  Failed: bcs.struct(\"ExecutionFailed\", {\n    error: ExecutionFailureStatus,\n    command: bcs.option(bcs.u64())\n  })\n});\nconst GasCostSummary = bcs.struct(\"GasCostSummary\", {\n  computationCost: bcs.u64(),\n  storageCost: bcs.u64(),\n  storageRebate: bcs.u64(),\n  nonRefundableStorageFee: bcs.u64()\n});\nconst TransactionEffectsV1 = bcs.struct(\"TransactionEffectsV1\", {\n  status: ExecutionStatus,\n  executedEpoch: bcs.u64(),\n  gasUsed: GasCostSummary,\n  modifiedAtVersions: bcs.vector(bcs.tuple([Address, bcs.u64()])),\n  sharedObjects: bcs.vector(SuiObjectRef),\n  transactionDigest: ObjectDigest,\n  created: bcs.vector(bcs.tuple([SuiObjectRef, Owner])),\n  mutated: bcs.vector(bcs.tuple([SuiObjectRef, Owner])),\n  unwrapped: bcs.vector(bcs.tuple([SuiObjectRef, Owner])),\n  deleted: bcs.vector(SuiObjectRef),\n  unwrappedThenDeleted: bcs.vector(SuiObjectRef),\n  wrapped: bcs.vector(SuiObjectRef),\n  gasObject: bcs.tuple([SuiObjectRef, Owner]),\n  eventsDigest: bcs.option(ObjectDigest),\n  dependencies: bcs.vector(ObjectDigest)\n});\nconst VersionDigest = bcs.tuple([bcs.u64(), ObjectDigest]);\nconst ObjectIn = bcs.enum(\"ObjectIn\", {\n  NotExist: null,\n  Exist: bcs.tuple([VersionDigest, Owner])\n});\nconst ObjectOut = bcs.enum(\"ObjectOut\", {\n  NotExist: null,\n  ObjectWrite: bcs.tuple([ObjectDigest, Owner]),\n  PackageWrite: VersionDigest\n});\nconst IDOperation = bcs.enum(\"IDOperation\", {\n  None: null,\n  Created: null,\n  Deleted: null\n});\nconst EffectsObjectChange = bcs.struct(\"EffectsObjectChange\", {\n  inputState: ObjectIn,\n  outputState: ObjectOut,\n  idOperation: IDOperation\n});\nconst UnchangedSharedKind = bcs.enum(\"UnchangedSharedKind\", {\n  ReadOnlyRoot: VersionDigest,\n  // TODO: these have been renamed to MutateConsensusStreamEnded and ReadConsensusStreamEnded\n  MutateDeleted: bcs.u64(),\n  ReadDeleted: bcs.u64(),\n  Cancelled: bcs.u64(),\n  PerEpochConfig: null\n});\nconst TransactionEffectsV2 = bcs.struct(\"TransactionEffectsV2\", {\n  status: ExecutionStatus,\n  executedEpoch: bcs.u64(),\n  gasUsed: GasCostSummary,\n  transactionDigest: ObjectDigest,\n  gasObjectIndex: bcs.option(bcs.u32()),\n  eventsDigest: bcs.option(ObjectDigest),\n  dependencies: bcs.vector(ObjectDigest),\n  lamportVersion: bcs.u64(),\n  changedObjects: bcs.vector(bcs.tuple([Address, EffectsObjectChange])),\n  unchangedSharedObjects: bcs.vector(bcs.tuple([Address, UnchangedSharedKind])),\n  auxDataDigest: bcs.option(ObjectDigest)\n});\nconst TransactionEffects = bcs.enum(\"TransactionEffects\", {\n  V1: TransactionEffectsV1,\n  V2: TransactionEffectsV2\n});\nexport {\n  TransactionEffects\n};\n\n", "import { bcs } from \"@mysten/bcs\";\nimport { Address } from \"./bcs.js\";\nfunction pureBcsSchemaFromTypeName(name) {\n  switch (name) {\n    case \"u8\":\n      return bcs.u8();\n    case \"u16\":\n      return bcs.u16();\n    case \"u32\":\n      return bcs.u32();\n    case \"u64\":\n      return bcs.u64();\n    case \"u128\":\n      return bcs.u128();\n    case \"u256\":\n      return bcs.u256();\n    case \"bool\":\n      return bcs.bool();\n    case \"string\":\n      return bcs.string();\n    case \"id\":\n    case \"address\":\n      return Address;\n  }\n  const generic = name.match(/^(vector|option)<(.+)>$/);\n  if (generic) {\n    const [kind, inner] = generic.slice(1);\n    if (kind === \"vector\") {\n      return bcs.vector(pureBcsSchemaFromTypeName(inner));\n    } else {\n      return bcs.option(pureBcsSchemaFromTypeName(inner));\n    }\n  }\n  throw new Error(`Invalid Pure type name: ${name}`);\n}\nexport {\n  pureBcsSchemaFromTypeName\n};\n\n", "import { bcs } from \"@mysten/bcs\";\nimport {\n  Address,\n  AppId,\n  Argument,\n  CallArg,\n  Command,\n  CompressedSignature,\n  GasData,\n  Intent,\n  IntentMessage,\n  IntentScope,\n  IntentVersion,\n  MultiSig,\n  MultiSigPkMap,\n  MultiSigPublicKey,\n  ObjectArg,\n  ObjectDigest,\n  Owner,\n  PasskeyAuthenticator,\n  ProgrammableMoveCall,\n  ProgrammableTransaction,\n  PublicKey,\n  SenderSignedData,\n  SenderSignedTransaction,\n  SharedObjectRef,\n  StructTag,\n  SuiObjectRef,\n  TransactionData,\n  TransactionDataV1,\n  TransactionExpiration,\n  TransactionKind,\n  TypeTag\n} from \"./bcs.js\";\nimport { TransactionEffects } from \"./effects.js\";\nimport { TypeTagSerializer } from \"./type-tag-serializer.js\";\nimport { BcsType, BcsStruct, BcsEnum, BcsTuple } from \"@mysten/bcs\";\nconst suiBcs = {\n  ...bcs,\n  U8: bcs.u8(),\n  U16: bcs.u16(),\n  U32: bcs.u32(),\n  U64: bcs.u64(),\n  U128: bcs.u128(),\n  U256: bcs.u256(),\n  ULEB128: bcs.uleb128(),\n  Bool: bcs.bool(),\n  String: bcs.string(),\n  Address,\n  AppId,\n  Argument,\n  CallArg,\n  Command,\n  CompressedSignature,\n  GasData,\n  Intent,\n  IntentMessage,\n  IntentScope,\n  IntentVersion,\n  MultiSig,\n  MultiSigPkMap,\n  MultiSigPublicKey,\n  ObjectArg,\n  ObjectDigest,\n  Owner,\n  PasskeyAuthenticator,\n  ProgrammableMoveCall,\n  ProgrammableTransaction,\n  PublicKey,\n  SenderSignedData,\n  SenderSignedTransaction,\n  SharedObjectRef,\n  StructTag,\n  SuiObjectRef,\n  TransactionData,\n  TransactionDataV1,\n  TransactionEffects,\n  TransactionExpiration,\n  TransactionKind,\n  TypeTag\n};\nimport {\n  pureBcsSchemaFromTypeName\n} from \"./pure.js\";\nexport {\n  BcsEnum,\n  BcsStruct,\n  BcsTuple,\n  BcsType,\n  TypeTagSerializer,\n  suiBcs as bcs,\n  pureBcsSchemaFromTypeName\n};\n\n", "import { toHex } from \"@mysten/bcs\";\nimport { blake2b } from \"@noble/hashes/blake2b\";\nimport { bcs } from \"../bcs/index.js\";\nfunction deriveDynamicFieldID(parentId, typeTag, key) {\n  const address = bcs.Address.serialize(parentId).toBytes();\n  const tag = bcs.TypeTag.serialize(typeTag).toBytes();\n  const keyLength = bcs.u64().serialize(key.length).toBytes();\n  const hash = blake2b.create({\n    dkLen: 32\n  });\n  hash.update(new Uint8Array([240]));\n  hash.update(address);\n  hash.update(keyLength);\n  hash.update(key);\n  hash.update(tag);\n  return `0x${toHex(hash.digest().slice(0, 32))}`;\n}\nexport {\n  deriveDynamicFieldID\n};\n\n", "import { TypeTagSerializer } from \"../bcs/type-tag-serializer.js\";\nimport { deriveDynamicFieldID } from \"./dynamic-fields.js\";\nfunction deriveObjectID(parentId, typeTag, key) {\n  const typeTagStr = typeof typeTag === \"string\" ? typeTag : TypeTagSerializer.tagToString(typeTag);\n  return deriveDynamicFieldID(\n    parentId,\n    `0x2::derived_object::DerivedObjectKey<${typeTagStr}>`,\n    key\n  );\n}\nexport {\n  deriveObjectID\n};\n\n"],
  "mappings": "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A,EACnD;AAAA,EAAI;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EACnD;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EACnD;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAClD;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EACnD;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAClD;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAClD;AAAA,EAAG;AAAA,EAAI;AAAA,EAAI;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAI;AAAA,EACnD;AAAA,EAAI;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,EAAG;AAAA,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",
  "names": ["padding", "alphabet", "base64String", "chunk", "vector", "_BcsType", "hex", "toBytes", "isBytes", "anumber", "abytes", "abytes", "hasHexBuiltin", "abytes", "anumber", "abytes", "blake2b", "blake2b"]
}
