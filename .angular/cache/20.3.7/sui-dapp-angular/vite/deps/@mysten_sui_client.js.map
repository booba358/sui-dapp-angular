{
  "version": 3,
  "sources": ["../../../../../../node_modules/@mysten/sui/dist/esm/jsonRpc/errors.js", "../../../../../../node_modules/@mysten/sui/dist/esm/jsonRpc/rpc-websocket-client.js", "../../../../../../node_modules/@mysten/sui/dist/esm/jsonRpc/http-transport.js", "../../../../../../node_modules/@mysten/sui/dist/esm/client/network.js", "../../../../../../node_modules/@mysten/sui/dist/esm/experimental/client.js", "../../../../../../node_modules/@mysten/sui/dist/esm/experimental/core.js", "../../../../../../node_modules/@mysten/sui/dist/esm/experimental/errors.js", "../../../../../../node_modules/@mysten/sui/dist/esm/experimental/transports/utils.js", "../../../../../../node_modules/@mysten/sui/dist/esm/jsonRpc/core.js", "../../../../../../node_modules/@mysten/sui/dist/esm/jsonRpc/client.js"],
  "sourcesContent": ["const CODE_TO_ERROR_TYPE = {\n  \"-32700\": \"ParseError\",\n  \"-32701\": \"OversizedRequest\",\n  \"-32702\": \"OversizedResponse\",\n  \"-32600\": \"InvalidRequest\",\n  \"-32601\": \"MethodNotFound\",\n  \"-32602\": \"InvalidParams\",\n  \"-32603\": \"InternalError\",\n  \"-32604\": \"ServerBusy\",\n  \"-32000\": \"CallExecutionFailed\",\n  \"-32001\": \"UnknownError\",\n  \"-32003\": \"SubscriptionClosed\",\n  \"-32004\": \"SubscriptionClosedWithError\",\n  \"-32005\": \"BatchesNotSupported\",\n  \"-32006\": \"TooManySubscriptions\",\n  \"-32050\": \"TransientError\",\n  \"-32002\": \"TransactionExecutionClientError\"\n};\nclass SuiHTTPTransportError extends Error {\n}\nclass JsonRpcError extends SuiHTTPTransportError {\n  constructor(message, code) {\n    super(message);\n    this.code = code;\n    this.type = CODE_TO_ERROR_TYPE[code] ?? \"ServerError\";\n  }\n}\nclass SuiHTTPStatusError extends SuiHTTPTransportError {\n  constructor(message, status, statusText) {\n    super(message);\n    this.status = status;\n    this.statusText = statusText;\n  }\n}\nexport {\n  JsonRpcError,\n  SuiHTTPStatusError,\n  SuiHTTPTransportError\n};\n\n", "var __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar __privateMethod = (obj, member, method) => (__accessCheck(obj, member, \"access private method\"), method);\nvar __privateWrapper = (obj, member, setter, getter) => ({\n  set _(value) {\n    __privateSet(obj, member, value, setter);\n  },\n  get _() {\n    return __privateGet(obj, member, getter);\n  }\n});\nvar _requestId, _disconnects, _webSocket, _connectionPromise, _subscriptions, _pendingRequests, _WebsocketClient_instances, setupWebSocket_fn, reconnect_fn;\nimport { JsonRpcError } from \"./errors.js\";\nfunction getWebsocketUrl(httpUrl) {\n  const url = new URL(httpUrl);\n  url.protocol = url.protocol.replace(\"http\", \"ws\");\n  return url.toString();\n}\nconst DEFAULT_CLIENT_OPTIONS = {\n  // We fudge the typing because we also check for undefined in the constructor:\n  WebSocketConstructor: typeof WebSocket !== \"undefined\" ? WebSocket : void 0,\n  callTimeout: 3e4,\n  reconnectTimeout: 3e3,\n  maxReconnects: 5\n};\nclass WebsocketClient {\n  constructor(endpoint, options = {}) {\n    __privateAdd(this, _WebsocketClient_instances);\n    __privateAdd(this, _requestId, 0);\n    __privateAdd(this, _disconnects, 0);\n    __privateAdd(this, _webSocket, null);\n    __privateAdd(this, _connectionPromise, null);\n    __privateAdd(this, _subscriptions, /* @__PURE__ */ new Set());\n    __privateAdd(this, _pendingRequests, /* @__PURE__ */ new Map());\n    this.endpoint = endpoint;\n    this.options = { ...DEFAULT_CLIENT_OPTIONS, ...options };\n    if (!this.options.WebSocketConstructor) {\n      throw new Error(\"Missing WebSocket constructor\");\n    }\n    if (this.endpoint.startsWith(\"http\")) {\n      this.endpoint = getWebsocketUrl(this.endpoint);\n    }\n  }\n  async makeRequest(method, params, signal) {\n    const webSocket = await __privateMethod(this, _WebsocketClient_instances, setupWebSocket_fn).call(this);\n    return new Promise((resolve, reject) => {\n      __privateSet(this, _requestId, __privateGet(this, _requestId) + 1);\n      __privateGet(this, _pendingRequests).set(__privateGet(this, _requestId), {\n        resolve,\n        reject,\n        timeout: setTimeout(() => {\n          __privateGet(this, _pendingRequests).delete(__privateGet(this, _requestId));\n          reject(new Error(`Request timeout: ${method}`));\n        }, this.options.callTimeout)\n      });\n      signal?.addEventListener(\"abort\", () => {\n        __privateGet(this, _pendingRequests).delete(__privateGet(this, _requestId));\n        reject(signal.reason);\n      });\n      webSocket.send(JSON.stringify({ jsonrpc: \"2.0\", id: __privateGet(this, _requestId), method, params }));\n    }).then(({ error, result }) => {\n      if (error) {\n        throw new JsonRpcError(error.message, error.code);\n      }\n      return result;\n    });\n  }\n  async subscribe(input) {\n    const subscription = new RpcSubscription(input);\n    __privateGet(this, _subscriptions).add(subscription);\n    await subscription.subscribe(this);\n    return () => subscription.unsubscribe(this);\n  }\n}\n_requestId = new WeakMap();\n_disconnects = new WeakMap();\n_webSocket = new WeakMap();\n_connectionPromise = new WeakMap();\n_subscriptions = new WeakMap();\n_pendingRequests = new WeakMap();\n_WebsocketClient_instances = new WeakSet();\nsetupWebSocket_fn = function() {\n  if (__privateGet(this, _connectionPromise)) {\n    return __privateGet(this, _connectionPromise);\n  }\n  __privateSet(this, _connectionPromise, new Promise((resolve) => {\n    __privateGet(this, _webSocket)?.close();\n    __privateSet(this, _webSocket, new this.options.WebSocketConstructor(this.endpoint));\n    __privateGet(this, _webSocket).addEventListener(\"open\", () => {\n      __privateSet(this, _disconnects, 0);\n      resolve(__privateGet(this, _webSocket));\n    });\n    __privateGet(this, _webSocket).addEventListener(\"close\", () => {\n      __privateWrapper(this, _disconnects)._++;\n      if (__privateGet(this, _disconnects) <= this.options.maxReconnects) {\n        setTimeout(() => {\n          __privateMethod(this, _WebsocketClient_instances, reconnect_fn).call(this);\n        }, this.options.reconnectTimeout);\n      }\n    });\n    __privateGet(this, _webSocket).addEventListener(\"message\", ({ data }) => {\n      let json;\n      try {\n        json = JSON.parse(data);\n      } catch (error) {\n        console.error(new Error(`Failed to parse RPC message: ${data}`, { cause: error }));\n        return;\n      }\n      if (\"id\" in json && json.id != null && __privateGet(this, _pendingRequests).has(json.id)) {\n        const { resolve: resolve2, timeout } = __privateGet(this, _pendingRequests).get(json.id);\n        clearTimeout(timeout);\n        resolve2(json);\n      } else if (\"params\" in json) {\n        const { params } = json;\n        __privateGet(this, _subscriptions).forEach((subscription) => {\n          if (subscription.subscriptionId === params.subscription) {\n            if (params.subscription === subscription.subscriptionId) {\n              subscription.onMessage(params.result);\n            }\n          }\n        });\n      }\n    });\n  }));\n  return __privateGet(this, _connectionPromise);\n};\nreconnect_fn = async function() {\n  __privateGet(this, _webSocket)?.close();\n  __privateSet(this, _connectionPromise, null);\n  return Promise.allSettled(\n    [...__privateGet(this, _subscriptions)].map((subscription) => subscription.subscribe(this))\n  );\n};\nclass RpcSubscription {\n  constructor(input) {\n    this.subscriptionId = null;\n    this.subscribed = false;\n    this.input = input;\n  }\n  onMessage(message) {\n    if (this.subscribed) {\n      this.input.onMessage(message);\n    }\n  }\n  async unsubscribe(client) {\n    const { subscriptionId } = this;\n    this.subscribed = false;\n    if (subscriptionId == null) return false;\n    this.subscriptionId = null;\n    return client.makeRequest(this.input.unsubscribe, [subscriptionId]);\n  }\n  async subscribe(client) {\n    this.subscriptionId = null;\n    this.subscribed = true;\n    const newSubscriptionId = await client.makeRequest(\n      this.input.method,\n      this.input.params,\n      this.input.signal\n    );\n    if (this.subscribed) {\n      this.subscriptionId = newSubscriptionId;\n    }\n  }\n}\nexport {\n  DEFAULT_CLIENT_OPTIONS,\n  WebsocketClient\n};\n\n", "var __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar __privateMethod = (obj, member, method) => (__accessCheck(obj, member, \"access private method\"), method);\nvar _requestId, _options, _websocketClient, _JsonRpcHTTPTransport_instances, getWebsocketClient_fn;\nimport { PACKAGE_VERSION, TARGETED_RPC_VERSION } from \"../version.js\";\nimport { JsonRpcError, SuiHTTPStatusError } from \"./errors.js\";\nimport { WebsocketClient } from \"./rpc-websocket-client.js\";\nclass JsonRpcHTTPTransport {\n  constructor(options) {\n    __privateAdd(this, _JsonRpcHTTPTransport_instances);\n    __privateAdd(this, _requestId, 0);\n    __privateAdd(this, _options);\n    __privateAdd(this, _websocketClient);\n    __privateSet(this, _options, options);\n  }\n  fetch(input, init) {\n    const fetchFn = __privateGet(this, _options).fetch ?? fetch;\n    if (!fetchFn) {\n      throw new Error(\n        \"The current environment does not support fetch, you can provide a fetch implementation in the options for SuiHTTPTransport.\"\n      );\n    }\n    return fetchFn(input, init);\n  }\n  async request(input) {\n    __privateSet(this, _requestId, __privateGet(this, _requestId) + 1);\n    const res = await this.fetch(__privateGet(this, _options).rpc?.url ?? __privateGet(this, _options).url, {\n      method: \"POST\",\n      signal: input.signal,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Client-Sdk-Type\": \"typescript\",\n        \"Client-Sdk-Version\": PACKAGE_VERSION,\n        \"Client-Target-Api-Version\": TARGETED_RPC_VERSION,\n        \"Client-Request-Method\": input.method,\n        ...__privateGet(this, _options).rpc?.headers\n      },\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        id: __privateGet(this, _requestId),\n        method: input.method,\n        params: input.params\n      })\n    });\n    if (!res.ok) {\n      throw new SuiHTTPStatusError(\n        `Unexpected status code: ${res.status}`,\n        res.status,\n        res.statusText\n      );\n    }\n    const data = await res.json();\n    if (\"error\" in data && data.error != null) {\n      throw new JsonRpcError(data.error.message, data.error.code);\n    }\n    return data.result;\n  }\n  async subscribe(input) {\n    const unsubscribe = await __privateMethod(this, _JsonRpcHTTPTransport_instances, getWebsocketClient_fn).call(this).subscribe(input);\n    if (input.signal) {\n      input.signal.throwIfAborted();\n      input.signal.addEventListener(\"abort\", () => {\n        unsubscribe();\n      });\n    }\n    return async () => !!await unsubscribe();\n  }\n}\n_requestId = new WeakMap();\n_options = new WeakMap();\n_websocketClient = new WeakMap();\n_JsonRpcHTTPTransport_instances = new WeakSet();\ngetWebsocketClient_fn = function() {\n  if (!__privateGet(this, _websocketClient)) {\n    const WebSocketConstructor = __privateGet(this, _options).WebSocketConstructor ?? WebSocket;\n    if (!WebSocketConstructor) {\n      throw new Error(\n        \"The current environment does not support WebSocket, you can provide a WebSocketConstructor in the options for SuiHTTPTransport.\"\n      );\n    }\n    __privateSet(this, _websocketClient, new WebsocketClient(\n      __privateGet(this, _options).websocket?.url ?? __privateGet(this, _options).url,\n      {\n        WebSocketConstructor,\n        ...__privateGet(this, _options).websocket\n      }\n    ));\n  }\n  return __privateGet(this, _websocketClient);\n};\nexport {\n  JsonRpcHTTPTransport\n};\n\n", "function getFullnodeUrl(network) {\n  switch (network) {\n    case \"mainnet\":\n      return \"https://fullnode.mainnet.sui.io:443\";\n    case \"testnet\":\n      return \"https://fullnode.testnet.sui.io:443\";\n    case \"devnet\":\n      return \"https://fullnode.devnet.sui.io:443\";\n    case \"localnet\":\n      return \"http://127.0.0.1:9000\";\n    default:\n      throw new Error(`Unknown network: ${network}`);\n  }\n}\nexport {\n  getFullnodeUrl\n};\n\n", "import { ClientCache } from \"./cache.js\";\nclass Experimental_BaseClient {\n  constructor({\n    network,\n    base,\n    cache = base?.cache ?? new ClientCache()\n  }) {\n    this.network = network;\n    this.base = base ?? this;\n    this.cache = cache;\n  }\n  $extend(...registrations) {\n    return Object.create(\n      this,\n      Object.fromEntries(\n        registrations.map((registration) => {\n          return [registration.name, { value: registration.register(this) }];\n        })\n      )\n    );\n  }\n}\nexport {\n  Experimental_BaseClient\n};\n\n", "import { TypeTagSerializer } from \"../bcs/type-tag-serializer.js\";\nimport { deriveDynamicFieldID } from \"../utils/dynamic-fields.js\";\nimport { normalizeStructTag, parseStructTag, SUI_ADDRESS_LENGTH } from \"../utils/sui-types.js\";\nimport { Experimental_BaseClient } from \"./client.js\";\nimport { MvrClient } from \"./mvr.js\";\nconst DEFAULT_MVR_URLS = {\n  mainnet: \"https://mainnet.mvr.mystenlabs.com\",\n  testnet: \"https://testnet.mvr.mystenlabs.com\"\n};\nclass Experimental_CoreClient extends Experimental_BaseClient {\n  constructor(options) {\n    super(options);\n    this.core = this;\n    this.mvr = new MvrClient({\n      cache: this.cache.scope(\"core.mvr\"),\n      url: options.mvr?.url ?? DEFAULT_MVR_URLS[this.network],\n      pageSize: options.mvr?.pageSize,\n      overrides: options.mvr?.overrides\n    });\n  }\n  async getObject(options) {\n    const { objectId } = options;\n    const {\n      objects: [result]\n    } = await this.getObjects({ objectIds: [objectId], signal: options.signal });\n    if (result instanceof Error) {\n      throw result;\n    }\n    return { object: result };\n  }\n  async getDynamicField(options) {\n    const normalizedNameType = TypeTagSerializer.parseFromStr(\n      (await this.core.mvr.resolveType({\n        type: options.name.type\n      })).type\n    );\n    const fieldId = deriveDynamicFieldID(options.parentId, normalizedNameType, options.name.bcs);\n    const {\n      objects: [fieldObject]\n    } = await this.getObjects({\n      objectIds: [fieldId],\n      signal: options.signal\n    });\n    if (fieldObject instanceof Error) {\n      throw fieldObject;\n    }\n    const fieldType = parseStructTag(fieldObject.type);\n    const content = await fieldObject.content;\n    return {\n      dynamicField: {\n        id: fieldObject.id,\n        digest: fieldObject.digest,\n        version: fieldObject.version,\n        type: fieldObject.type,\n        previousTransaction: fieldObject.previousTransaction,\n        name: {\n          type: typeof fieldType.typeParams[0] === \"string\" ? fieldType.typeParams[0] : normalizeStructTag(fieldType.typeParams[0]),\n          bcs: options.name.bcs\n        },\n        value: {\n          type: typeof fieldType.typeParams[1] === \"string\" ? fieldType.typeParams[1] : normalizeStructTag(fieldType.typeParams[1]),\n          bcs: content.slice(SUI_ADDRESS_LENGTH + options.name.bcs.length)\n        }\n      }\n    };\n  }\n  async waitForTransaction({\n    signal,\n    timeout = 60 * 1e3,\n    ...input\n  }) {\n    const abortSignal = signal ? AbortSignal.any([AbortSignal.timeout(timeout), signal]) : AbortSignal.timeout(timeout);\n    const abortPromise = new Promise((_, reject) => {\n      abortSignal.addEventListener(\"abort\", () => reject(abortSignal.reason));\n    });\n    abortPromise.catch(() => {\n    });\n    while (true) {\n      abortSignal.throwIfAborted();\n      try {\n        return await this.getTransaction({\n          ...input,\n          signal: abortSignal\n        });\n      } catch {\n        await Promise.race([new Promise((resolve) => setTimeout(resolve, 2e3)), abortPromise]);\n      }\n    }\n  }\n}\nexport {\n  Experimental_CoreClient\n};\n\n", "class SuiClientError extends Error {\n}\nclass ObjectError extends SuiClientError {\n  constructor(code, message) {\n    super(message);\n    this.code = code;\n  }\n  static fromResponse(response, objectId) {\n    switch (response.code) {\n      case \"notExists\":\n        return new ObjectError(response.code, `Object ${response.object_id} does not exist`);\n      case \"dynamicFieldNotFound\":\n        return new ObjectError(\n          response.code,\n          `Dynamic field not found for object ${response.parent_object_id}`\n        );\n      case \"deleted\":\n        return new ObjectError(response.code, `Object ${response.object_id} has been deleted`);\n      case \"displayError\":\n        return new ObjectError(response.code, `Display error: ${response.error}`);\n      case \"unknown\":\n      default:\n        return new ObjectError(\n          response.code,\n          `Unknown error while loading object${objectId ? ` ${objectId}` : \"\"}`\n        );\n    }\n  }\n}\nexport {\n  ObjectError,\n  SuiClientError\n};\n\n", "import { bcs } from \"../../bcs/index.js\";\nimport { TransactionDataBuilder } from \"../../transactions/TransactionData.js\";\nfunction parseTransactionBcs(bytes) {\n  return {\n    ...TransactionDataBuilder.fromBytes(bytes).snapshot(),\n    bcs: bytes\n  };\n}\nfunction parseTransactionEffectsBcs(effects) {\n  const parsed = bcs.TransactionEffects.parse(effects);\n  switch (parsed.$kind) {\n    case \"V1\":\n      return parseTransactionEffectsV1({ bytes: effects, effects: parsed.V1 });\n    case \"V2\":\n      return parseTransactionEffectsV2({ bytes: effects, effects: parsed.V2 });\n    default:\n      throw new Error(\n        `Unknown transaction effects version: ${parsed.$kind}`\n      );\n  }\n}\nfunction parseTransactionEffectsV1(_) {\n  throw new Error(\"V1 effects are not supported yet\");\n}\nfunction parseTransactionEffectsV2({\n  bytes,\n  effects\n}) {\n  const changedObjects = effects.changedObjects.map(\n    ([id, change]) => {\n      return {\n        id,\n        inputState: change.inputState.$kind === \"Exist\" ? \"Exists\" : \"DoesNotExist\",\n        inputVersion: change.inputState.Exist?.[0][0] ?? null,\n        inputDigest: change.inputState.Exist?.[0][1] ?? null,\n        inputOwner: change.inputState.Exist?.[1] ?? null,\n        outputState: change.outputState.$kind === \"NotExist\" ? \"DoesNotExist\" : change.outputState.$kind,\n        outputVersion: change.outputState.$kind === \"PackageWrite\" ? change.outputState.PackageWrite?.[0] : change.outputState.ObjectWrite ? effects.lamportVersion : null,\n        outputDigest: change.outputState.$kind === \"PackageWrite\" ? change.outputState.PackageWrite?.[1] : change.outputState.ObjectWrite?.[0] ?? null,\n        outputOwner: change.outputState.ObjectWrite ? change.outputState.ObjectWrite[1] : null,\n        idOperation: change.idOperation.$kind\n      };\n    }\n  );\n  return {\n    bcs: bytes,\n    digest: effects.transactionDigest,\n    version: 2,\n    status: effects.status.$kind === \"Success\" ? {\n      success: true,\n      error: null\n    } : {\n      success: false,\n      // TODO: add command\n      error: effects.status.Failed.error.$kind\n    },\n    gasUsed: effects.gasUsed,\n    transactionDigest: effects.transactionDigest,\n    gasObject: effects.gasObjectIndex === null ? null : changedObjects[effects.gasObjectIndex] ?? null,\n    eventsDigest: effects.eventsDigest,\n    dependencies: effects.dependencies,\n    lamportVersion: effects.lamportVersion,\n    changedObjects,\n    unchangedConsensusObjects: effects.unchangedSharedObjects.map(\n      ([objectId, object]) => {\n        return {\n          kind: object.$kind === \"MutateDeleted\" ? \"MutateConsensusStreamEnded\" : object.$kind === \"ReadDeleted\" ? \"ReadConsensusStreamEnded\" : object.$kind,\n          objectId,\n          version: object.$kind === \"ReadOnlyRoot\" ? object.ReadOnlyRoot[0] : object[object.$kind],\n          digest: object.$kind === \"ReadOnlyRoot\" ? object.ReadOnlyRoot[1] : null\n        };\n      }\n    ),\n    auxiliaryDataDigest: effects.auxDataDigest\n  };\n}\nexport {\n  parseTransactionBcs,\n  parseTransactionEffectsBcs\n};\n\n", "var __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar _jsonRpcClient;\nimport { fromBase64 } from \"@mysten/bcs\";\nimport { bcs } from \"../bcs/index.js\";\nimport { Transaction } from \"../transactions/Transaction.js\";\nimport { jsonRpcClientResolveTransactionPlugin } from \"./json-rpc-resolver.js\";\nimport { TransactionDataBuilder } from \"../transactions/TransactionData.js\";\nimport { chunk } from \"@mysten/utils\";\nimport { normalizeSuiAddress } from \"../utils/sui-types.js\";\nimport { Experimental_CoreClient } from \"../experimental/core.js\";\nimport { ObjectError } from \"../experimental/errors.js\";\nimport { parseTransactionBcs, parseTransactionEffectsBcs } from \"../experimental/index.js\";\nclass JSONRpcCoreClient extends Experimental_CoreClient {\n  constructor({\n    jsonRpcClient,\n    mvr\n  }) {\n    super({ network: jsonRpcClient.network, base: jsonRpcClient, mvr });\n    __privateAdd(this, _jsonRpcClient);\n    __privateSet(this, _jsonRpcClient, jsonRpcClient);\n  }\n  async getObjects(options) {\n    const batches = chunk(options.objectIds, 50);\n    const results = [];\n    for (const batch of batches) {\n      const objects = await __privateGet(this, _jsonRpcClient).multiGetObjects({\n        ids: batch,\n        options: {\n          showOwner: true,\n          showType: true,\n          showBcs: true,\n          showPreviousTransaction: true\n        },\n        signal: options.signal\n      });\n      for (const [idx, object] of objects.entries()) {\n        if (object.error) {\n          results.push(ObjectError.fromResponse(object.error, batch[idx]));\n        } else {\n          results.push(parseObject(object.data));\n        }\n      }\n    }\n    return {\n      objects: results\n    };\n  }\n  async getOwnedObjects(options) {\n    const objects = await __privateGet(this, _jsonRpcClient).getOwnedObjects({\n      owner: options.address,\n      limit: options.limit,\n      cursor: options.cursor,\n      options: {\n        showOwner: true,\n        showType: true,\n        showBcs: true,\n        showPreviousTransaction: true\n      },\n      filter: options.type ? { StructType: options.type } : null,\n      signal: options.signal\n    });\n    return {\n      objects: objects.data.map((result) => {\n        if (result.error) {\n          throw ObjectError.fromResponse(result.error);\n        }\n        return parseObject(result.data);\n      }),\n      hasNextPage: objects.hasNextPage,\n      cursor: objects.nextCursor ?? null\n    };\n  }\n  async getCoins(options) {\n    const coins = await __privateGet(this, _jsonRpcClient).getCoins({\n      owner: options.address,\n      coinType: options.coinType,\n      limit: options.limit,\n      cursor: options.cursor,\n      signal: options.signal\n    });\n    return {\n      objects: coins.data.map((coin) => {\n        return {\n          id: coin.coinObjectId,\n          version: coin.version,\n          digest: coin.digest,\n          balance: coin.balance,\n          type: `0x2::coin::Coin<${coin.coinType}>`,\n          content: Promise.resolve(\n            Coin.serialize({\n              id: coin.coinObjectId,\n              balance: {\n                value: coin.balance\n              }\n            }).toBytes()\n          ),\n          owner: {\n            $kind: \"ObjectOwner\",\n            ObjectOwner: options.address\n          },\n          previousTransaction: coin.previousTransaction\n        };\n      }),\n      hasNextPage: coins.hasNextPage,\n      cursor: coins.nextCursor ?? null\n    };\n  }\n  async getBalance(options) {\n    const balance = await __privateGet(this, _jsonRpcClient).getBalance({\n      owner: options.address,\n      coinType: options.coinType,\n      signal: options.signal\n    });\n    return {\n      balance: {\n        coinType: balance.coinType,\n        balance: balance.totalBalance\n      }\n    };\n  }\n  async getAllBalances(options) {\n    const balances = await __privateGet(this, _jsonRpcClient).getAllBalances({\n      owner: options.address,\n      signal: options.signal\n    });\n    return {\n      balances: balances.map((balance) => ({\n        coinType: balance.coinType,\n        balance: balance.totalBalance\n      })),\n      hasNextPage: false,\n      cursor: null\n    };\n  }\n  async getTransaction(options) {\n    const transaction = await __privateGet(this, _jsonRpcClient).getTransactionBlock({\n      digest: options.digest,\n      options: {\n        showRawInput: true,\n        showObjectChanges: true,\n        showRawEffects: true,\n        showEvents: true,\n        showEffects: true,\n        showBalanceChanges: true\n      },\n      signal: options.signal\n    });\n    return {\n      transaction: parseTransaction(transaction)\n    };\n  }\n  async executeTransaction(options) {\n    const transaction = await __privateGet(this, _jsonRpcClient).executeTransactionBlock({\n      transactionBlock: options.transaction,\n      signature: options.signatures,\n      options: {\n        showRawEffects: true,\n        showEvents: true,\n        showObjectChanges: true,\n        showRawInput: true,\n        showEffects: true,\n        showBalanceChanges: true\n      },\n      signal: options.signal\n    });\n    return {\n      transaction: parseTransaction(transaction)\n    };\n  }\n  async dryRunTransaction(options) {\n    const tx = Transaction.from(options.transaction);\n    const result = await __privateGet(this, _jsonRpcClient).dryRunTransactionBlock({\n      transactionBlock: options.transaction,\n      signal: options.signal\n    });\n    const { effects, objectTypes } = parseTransactionEffectsJson({\n      effects: result.effects,\n      objectChanges: result.objectChanges\n    });\n    return {\n      transaction: {\n        digest: await tx.getDigest(),\n        epoch: null,\n        effects,\n        objectTypes: Promise.resolve(objectTypes),\n        signatures: [],\n        transaction: parseTransactionBcs(options.transaction),\n        balanceChanges: result.balanceChanges.map((change) => ({\n          coinType: change.coinType,\n          address: parseOwnerAddress(change.owner),\n          amount: change.amount\n        }))\n      }\n    };\n  }\n  async getReferenceGasPrice(options) {\n    const referenceGasPrice = await __privateGet(this, _jsonRpcClient).getReferenceGasPrice({\n      signal: options?.signal\n    });\n    return {\n      referenceGasPrice: String(referenceGasPrice)\n    };\n  }\n  async getDynamicFields(options) {\n    const dynamicFields = await __privateGet(this, _jsonRpcClient).getDynamicFields({\n      parentId: options.parentId,\n      limit: options.limit,\n      cursor: options.cursor\n    });\n    return {\n      dynamicFields: dynamicFields.data.map((dynamicField) => {\n        return {\n          id: dynamicField.objectId,\n          type: dynamicField.objectType,\n          name: {\n            type: dynamicField.name.type,\n            bcs: fromBase64(dynamicField.bcsName)\n          }\n        };\n      }),\n      hasNextPage: dynamicFields.hasNextPage,\n      cursor: dynamicFields.nextCursor\n    };\n  }\n  async verifyZkLoginSignature(options) {\n    const result = await __privateGet(this, _jsonRpcClient).verifyZkLoginSignature({\n      bytes: options.bytes,\n      signature: options.signature,\n      intentScope: options.intentScope,\n      author: options.author\n    });\n    return {\n      success: result.success,\n      errors: result.errors\n    };\n  }\n  resolveNameServiceNames(options) {\n    return __privateGet(this, _jsonRpcClient).resolveNameServiceNames(options);\n  }\n  resolveTransactionPlugin() {\n    return jsonRpcClientResolveTransactionPlugin(__privateGet(this, _jsonRpcClient));\n  }\n  async getMoveFunction(options) {\n    const result = await __privateGet(this, _jsonRpcClient).getNormalizedMoveFunction({\n      package: (await this.mvr.resolvePackage({ package: options.packageId })).package,\n      module: options.moduleName,\n      function: options.name\n    });\n    return {\n      function: {\n        packageId: normalizeSuiAddress(options.packageId),\n        moduleName: options.moduleName,\n        name: options.name,\n        visibility: parseVisibility(result.visibility),\n        isEntry: result.isEntry,\n        typeParameters: result.typeParameters.map((abilities) => ({\n          isPhantom: false,\n          constraints: parseAbilities(abilities)\n        })),\n        parameters: result.parameters.map((param) => parseNormalizedSuiMoveType(param)),\n        returns: result.return.map((ret) => parseNormalizedSuiMoveType(ret))\n      }\n    };\n  }\n}\n_jsonRpcClient = new WeakMap();\nfunction parseObject(object) {\n  return {\n    id: object.objectId,\n    version: object.version,\n    digest: object.digest,\n    type: object.type,\n    content: Promise.resolve(\n      object.bcs?.dataType === \"moveObject\" ? fromBase64(object.bcs.bcsBytes) : new Uint8Array()\n    ),\n    owner: parseOwner(object.owner),\n    previousTransaction: object.previousTransaction ?? null\n  };\n}\nfunction parseOwner(owner) {\n  if (owner === \"Immutable\") {\n    return {\n      $kind: \"Immutable\",\n      Immutable: true\n    };\n  }\n  if (\"ConsensusAddressOwner\" in owner) {\n    return {\n      $kind: \"ConsensusAddressOwner\",\n      ConsensusAddressOwner: {\n        owner: owner.ConsensusAddressOwner.owner,\n        startVersion: owner.ConsensusAddressOwner.start_version\n      }\n    };\n  }\n  if (\"AddressOwner\" in owner) {\n    return {\n      $kind: \"AddressOwner\",\n      AddressOwner: owner.AddressOwner\n    };\n  }\n  if (\"ObjectOwner\" in owner) {\n    return {\n      $kind: \"ObjectOwner\",\n      ObjectOwner: owner.ObjectOwner\n    };\n  }\n  if (\"Shared\" in owner) {\n    return {\n      $kind: \"Shared\",\n      Shared: {\n        initialSharedVersion: owner.Shared.initial_shared_version\n      }\n    };\n  }\n  throw new Error(`Unknown owner type: ${JSON.stringify(owner)}`);\n}\nfunction parseOwnerAddress(owner) {\n  if (owner === \"Immutable\") {\n    return null;\n  }\n  if (\"ConsensusAddressOwner\" in owner) {\n    return owner.ConsensusAddressOwner.owner;\n  }\n  if (\"AddressOwner\" in owner) {\n    return owner.AddressOwner;\n  }\n  if (\"ObjectOwner\" in owner) {\n    return owner.ObjectOwner;\n  }\n  if (\"Shared\" in owner) {\n    return null;\n  }\n  throw new Error(`Unknown owner type: ${JSON.stringify(owner)}`);\n}\nfunction parseTransaction(transaction) {\n  const parsedTx = bcs.SenderSignedData.parse(fromBase64(transaction.rawTransaction))[0];\n  const objectTypes = {};\n  transaction.objectChanges?.forEach((change) => {\n    if (change.type !== \"published\") {\n      objectTypes[change.objectId] = change.objectType;\n    }\n  });\n  const bytes = bcs.TransactionData.serialize(parsedTx.intentMessage.value).toBytes();\n  const data = TransactionDataBuilder.restore({\n    version: 2,\n    sender: parsedTx.intentMessage.value.V1.sender,\n    expiration: parsedTx.intentMessage.value.V1.expiration,\n    gasData: parsedTx.intentMessage.value.V1.gasData,\n    inputs: parsedTx.intentMessage.value.V1.kind.ProgrammableTransaction.inputs,\n    commands: parsedTx.intentMessage.value.V1.kind.ProgrammableTransaction.commands\n  });\n  return {\n    digest: transaction.digest,\n    epoch: transaction.effects?.executedEpoch ?? null,\n    effects: parseTransactionEffectsBcs(new Uint8Array(transaction.rawEffects)),\n    objectTypes: Promise.resolve(objectTypes),\n    transaction: {\n      ...data,\n      bcs: bytes\n    },\n    signatures: parsedTx.txSignatures,\n    balanceChanges: transaction.balanceChanges?.map((change) => ({\n      coinType: change.coinType,\n      address: parseOwnerAddress(change.owner),\n      amount: change.amount\n    })) ?? []\n  };\n}\nfunction parseTransactionEffectsJson({\n  bytes,\n  effects,\n  objectChanges\n}) {\n  const changedObjects = [];\n  const unchangedConsensusObjects = [];\n  const objectTypes = {};\n  objectChanges?.forEach((change) => {\n    switch (change.type) {\n      case \"published\":\n        changedObjects.push({\n          id: change.packageId,\n          inputState: \"DoesNotExist\",\n          inputVersion: null,\n          inputDigest: null,\n          inputOwner: null,\n          outputState: \"PackageWrite\",\n          outputVersion: change.version,\n          outputDigest: change.digest,\n          outputOwner: null,\n          idOperation: \"Created\"\n        });\n        break;\n      case \"transferred\":\n        changedObjects.push({\n          id: change.objectId,\n          inputState: \"Exists\",\n          inputVersion: change.version,\n          inputDigest: change.digest,\n          inputOwner: {\n            $kind: \"AddressOwner\",\n            AddressOwner: change.sender\n          },\n          outputState: \"ObjectWrite\",\n          outputVersion: change.version,\n          outputDigest: change.digest,\n          outputOwner: parseOwner(change.recipient),\n          idOperation: \"None\"\n        });\n        objectTypes[change.objectId] = change.objectType;\n        break;\n      case \"mutated\":\n        changedObjects.push({\n          id: change.objectId,\n          inputState: \"Exists\",\n          inputVersion: change.previousVersion,\n          inputDigest: null,\n          inputOwner: parseOwner(change.owner),\n          outputState: \"ObjectWrite\",\n          outputVersion: change.version,\n          outputDigest: change.digest,\n          outputOwner: parseOwner(change.owner),\n          idOperation: \"None\"\n        });\n        objectTypes[change.objectId] = change.objectType;\n        break;\n      case \"deleted\":\n        changedObjects.push({\n          id: change.objectId,\n          inputState: \"Exists\",\n          inputVersion: change.version,\n          inputDigest: effects.deleted?.find((d) => d.objectId === change.objectId)?.digest ?? null,\n          inputOwner: null,\n          outputState: \"DoesNotExist\",\n          outputVersion: null,\n          outputDigest: null,\n          outputOwner: null,\n          idOperation: \"Deleted\"\n        });\n        objectTypes[change.objectId] = change.objectType;\n        break;\n      case \"wrapped\":\n        changedObjects.push({\n          id: change.objectId,\n          inputState: \"Exists\",\n          inputVersion: change.version,\n          inputDigest: null,\n          inputOwner: {\n            $kind: \"AddressOwner\",\n            AddressOwner: change.sender\n          },\n          outputState: \"ObjectWrite\",\n          outputVersion: change.version,\n          outputDigest: effects.wrapped?.find((w) => w.objectId === change.objectId)?.digest ?? null,\n          outputOwner: {\n            $kind: \"ObjectOwner\",\n            ObjectOwner: change.sender\n          },\n          idOperation: \"None\"\n        });\n        objectTypes[change.objectId] = change.objectType;\n        break;\n      case \"created\":\n        changedObjects.push({\n          id: change.objectId,\n          inputState: \"DoesNotExist\",\n          inputVersion: null,\n          inputDigest: null,\n          inputOwner: null,\n          outputState: \"ObjectWrite\",\n          outputVersion: change.version,\n          outputDigest: change.digest,\n          outputOwner: parseOwner(change.owner),\n          idOperation: \"Created\"\n        });\n        objectTypes[change.objectId] = change.objectType;\n        break;\n    }\n  });\n  return {\n    objectTypes,\n    effects: {\n      bcs: bytes ?? null,\n      digest: effects.transactionDigest,\n      version: 2,\n      status: effects.status.status === \"success\" ? { success: true, error: null } : { success: false, error: effects.status.error },\n      gasUsed: effects.gasUsed,\n      transactionDigest: effects.transactionDigest,\n      gasObject: {\n        id: effects.gasObject?.reference.objectId,\n        inputState: \"Exists\",\n        inputVersion: null,\n        inputDigest: null,\n        inputOwner: null,\n        outputState: \"ObjectWrite\",\n        outputVersion: effects.gasObject.reference.version,\n        outputDigest: effects.gasObject.reference.digest,\n        outputOwner: parseOwner(effects.gasObject.owner),\n        idOperation: \"None\"\n      },\n      eventsDigest: effects.eventsDigest ?? null,\n      dependencies: effects.dependencies ?? [],\n      lamportVersion: effects.gasObject.reference.version,\n      changedObjects,\n      unchangedConsensusObjects,\n      auxiliaryDataDigest: null\n    }\n  };\n}\nconst Balance = bcs.struct(\"Balance\", {\n  value: bcs.u64()\n});\nconst Coin = bcs.struct(\"Coin\", {\n  id: bcs.Address,\n  balance: Balance\n});\nfunction parseNormalizedSuiMoveType(type) {\n  if (typeof type !== \"string\") {\n    if (\"Reference\" in type) {\n      return {\n        reference: \"immutable\",\n        body: parseNormalizedSuiMoveTypeBody(type.Reference)\n      };\n    }\n    if (\"MutableReference\" in type) {\n      return {\n        reference: \"mutable\",\n        body: parseNormalizedSuiMoveTypeBody(type.MutableReference)\n      };\n    }\n  }\n  return {\n    reference: null,\n    body: parseNormalizedSuiMoveTypeBody(type)\n  };\n}\nfunction parseNormalizedSuiMoveTypeBody(type) {\n  switch (type) {\n    case \"Address\":\n      return { $kind: \"address\" };\n    case \"Bool\":\n      return { $kind: \"bool\" };\n    case \"U8\":\n      return { $kind: \"u8\" };\n    case \"U16\":\n      return { $kind: \"u16\" };\n    case \"U32\":\n      return { $kind: \"u32\" };\n    case \"U64\":\n      return { $kind: \"u64\" };\n    case \"U128\":\n      return { $kind: \"u128\" };\n    case \"U256\":\n      return { $kind: \"u256\" };\n  }\n  if (typeof type === \"string\") {\n    throw new Error(`Unknown type: ${type}`);\n  }\n  if (\"Vector\" in type) {\n    return {\n      $kind: \"vector\",\n      vector: parseNormalizedSuiMoveTypeBody(type.Vector)\n    };\n  }\n  if (\"Struct\" in type) {\n    return {\n      $kind: \"datatype\",\n      datatype: {\n        typeName: `${normalizeSuiAddress(type.Struct.address)}::${type.Struct.module}::${type.Struct.name}`,\n        typeParameters: type.Struct.typeArguments.map((t) => parseNormalizedSuiMoveTypeBody(t))\n      }\n    };\n  }\n  if (\"TypeParameter\" in type) {\n    return {\n      $kind: \"typeParameter\",\n      index: type.TypeParameter\n    };\n  }\n  throw new Error(`Unknown type: ${JSON.stringify(type)}`);\n}\nfunction parseAbilities(abilitySet) {\n  return abilitySet.abilities.map((ability) => {\n    switch (ability) {\n      case \"Copy\":\n        return \"copy\";\n      case \"Drop\":\n        return \"drop\";\n      case \"Store\":\n        return \"store\";\n      case \"Key\":\n        return \"key\";\n      default:\n        return \"unknown\";\n    }\n  });\n}\nfunction parseVisibility(visibility) {\n  switch (visibility) {\n    case \"Public\":\n      return \"public\";\n    case \"Private\":\n      return \"private\";\n    case \"Friend\":\n      return \"friend\";\n    default:\n      return \"unknown\";\n  }\n}\nexport {\n  JSONRpcCoreClient\n};\n\n", "import { fromBase58, toBase64, toHex } from \"@mysten/bcs\";\nimport { Experimental_BaseClient } from \"../experimental/client.js\";\nimport { isTransaction } from \"../transactions/Transaction.js\";\nimport {\n  isValidSuiAddress,\n  isValidSuiObjectId,\n  isValidTransactionDigest,\n  normalizeSuiAddress,\n  normalizeSuiObjectId\n} from \"../utils/sui-types.js\";\nimport { normalizeSuiNSName } from \"../utils/suins.js\";\nimport { JsonRpcHTTPTransport } from \"./http-transport.js\";\nimport { isValidNamedPackage } from \"../utils/move-registry.js\";\nimport { hasMvrName } from \"../experimental/mvr.js\";\nimport { JSONRpcCoreClient } from \"./core.js\";\nconst SUI_CLIENT_BRAND = Symbol.for(\"@mysten/SuiClient\");\nfunction isSuiJsonRpcClient(client) {\n  return typeof client === \"object\" && client !== null && client[SUI_CLIENT_BRAND] === true;\n}\nclass SuiJsonRpcClient extends Experimental_BaseClient {\n  /**\n   * Establish a connection to a Sui RPC endpoint\n   *\n   * @param options configuration options for the API Client\n   */\n  constructor(options) {\n    super({ network: options.network ?? \"unknown\" });\n    this.jsonRpc = this;\n    this.transport = options.transport ?? new JsonRpcHTTPTransport({ url: options.url });\n    this.core = new JSONRpcCoreClient({\n      jsonRpcClient: this,\n      mvr: options.mvr\n    });\n  }\n  get [SUI_CLIENT_BRAND]() {\n    return true;\n  }\n  async getRpcApiVersion({ signal } = {}) {\n    const resp = await this.transport.request({\n      method: \"rpc.discover\",\n      params: [],\n      signal\n    });\n    return resp.info.version;\n  }\n  /**\n   * Get all Coin<`coin_type`> objects owned by an address.\n   */\n  async getCoins({\n    coinType,\n    owner,\n    cursor,\n    limit,\n    signal\n  }) {\n    if (!owner || !isValidSuiAddress(normalizeSuiAddress(owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    if (coinType && hasMvrName(coinType)) {\n      coinType = (await this.core.mvr.resolveType({\n        type: coinType\n      })).type;\n    }\n    return await this.transport.request({\n      method: \"suix_getCoins\",\n      params: [owner, coinType, cursor, limit],\n      signal\n    });\n  }\n  /**\n   * Get all Coin objects owned by an address.\n   */\n  async getAllCoins(input) {\n    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({\n      method: \"suix_getAllCoins\",\n      params: [input.owner, input.cursor, input.limit],\n      signal: input.signal\n    });\n  }\n  /**\n   * Get the total coin balance for one coin type, owned by the address owner.\n   */\n  async getBalance({ owner, coinType, signal }) {\n    if (!owner || !isValidSuiAddress(normalizeSuiAddress(owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    if (coinType && hasMvrName(coinType)) {\n      coinType = (await this.core.mvr.resolveType({\n        type: coinType\n      })).type;\n    }\n    return await this.transport.request({\n      method: \"suix_getBalance\",\n      params: [owner, coinType],\n      signal\n    });\n  }\n  /**\n   * Get the total coin balance for all coin types, owned by the address owner.\n   */\n  async getAllBalances(input) {\n    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({\n      method: \"suix_getAllBalances\",\n      params: [input.owner],\n      signal: input.signal\n    });\n  }\n  /**\n   * Fetch CoinMetadata for a given coin type\n   */\n  async getCoinMetadata({ coinType, signal }) {\n    if (coinType && hasMvrName(coinType)) {\n      coinType = (await this.core.mvr.resolveType({\n        type: coinType\n      })).type;\n    }\n    return await this.transport.request({\n      method: \"suix_getCoinMetadata\",\n      params: [coinType],\n      signal\n    });\n  }\n  /**\n   *  Fetch total supply for a coin\n   */\n  async getTotalSupply({ coinType, signal }) {\n    if (coinType && hasMvrName(coinType)) {\n      coinType = (await this.core.mvr.resolveType({\n        type: coinType\n      })).type;\n    }\n    return await this.transport.request({\n      method: \"suix_getTotalSupply\",\n      params: [coinType],\n      signal\n    });\n  }\n  /**\n   * Invoke any RPC method\n   * @param method the method to be invoked\n   * @param args the arguments to be passed to the RPC request\n   */\n  async call(method, params, { signal } = {}) {\n    return await this.transport.request({ method, params, signal });\n  }\n  /**\n   * Get Move function argument types like read, write and full access\n   */\n  async getMoveFunctionArgTypes({\n    package: pkg,\n    module,\n    function: fn,\n    signal\n  }) {\n    if (pkg && isValidNamedPackage(pkg)) {\n      pkg = (await this.core.mvr.resolvePackage({\n        package: pkg\n      })).package;\n    }\n    return await this.transport.request({\n      method: \"sui_getMoveFunctionArgTypes\",\n      params: [pkg, module, fn],\n      signal\n    });\n  }\n  /**\n   * Get a map from module name to\n   * structured representations of Move modules\n   */\n  async getNormalizedMoveModulesByPackage({\n    package: pkg,\n    signal\n  }) {\n    if (pkg && isValidNamedPackage(pkg)) {\n      pkg = (await this.core.mvr.resolvePackage({\n        package: pkg\n      })).package;\n    }\n    return await this.transport.request({\n      method: \"sui_getNormalizedMoveModulesByPackage\",\n      params: [pkg],\n      signal\n    });\n  }\n  /**\n   * Get a structured representation of Move module\n   */\n  async getNormalizedMoveModule({\n    package: pkg,\n    module,\n    signal\n  }) {\n    if (pkg && isValidNamedPackage(pkg)) {\n      pkg = (await this.core.mvr.resolvePackage({\n        package: pkg\n      })).package;\n    }\n    return await this.transport.request({\n      method: \"sui_getNormalizedMoveModule\",\n      params: [pkg, module],\n      signal\n    });\n  }\n  /**\n   * Get a structured representation of Move function\n   */\n  async getNormalizedMoveFunction({\n    package: pkg,\n    module,\n    function: fn,\n    signal\n  }) {\n    if (pkg && isValidNamedPackage(pkg)) {\n      pkg = (await this.core.mvr.resolvePackage({\n        package: pkg\n      })).package;\n    }\n    return await this.transport.request({\n      method: \"sui_getNormalizedMoveFunction\",\n      params: [pkg, module, fn],\n      signal\n    });\n  }\n  /**\n   * Get a structured representation of Move struct\n   */\n  async getNormalizedMoveStruct({\n    package: pkg,\n    module,\n    struct,\n    signal\n  }) {\n    if (pkg && isValidNamedPackage(pkg)) {\n      pkg = (await this.core.mvr.resolvePackage({\n        package: pkg\n      })).package;\n    }\n    return await this.transport.request({\n      method: \"sui_getNormalizedMoveStruct\",\n      params: [pkg, module, struct],\n      signal\n    });\n  }\n  /**\n   * Get all objects owned by an address\n   */\n  async getOwnedObjects(input) {\n    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    const filter = input.filter ? {\n      ...input.filter\n    } : void 0;\n    if (filter && \"MoveModule\" in filter && isValidNamedPackage(filter.MoveModule.package)) {\n      filter.MoveModule = {\n        module: filter.MoveModule.module,\n        package: (await this.core.mvr.resolvePackage({\n          package: filter.MoveModule.package\n        })).package\n      };\n    } else if (filter && \"StructType\" in filter && hasMvrName(filter.StructType)) {\n      filter.StructType = (await this.core.mvr.resolveType({\n        type: filter.StructType\n      })).type;\n    }\n    return await this.transport.request({\n      method: \"suix_getOwnedObjects\",\n      params: [\n        input.owner,\n        {\n          filter,\n          options: input.options\n        },\n        input.cursor,\n        input.limit\n      ],\n      signal: input.signal\n    });\n  }\n  /**\n   * Get details about an object\n   */\n  async getObject(input) {\n    if (!input.id || !isValidSuiObjectId(normalizeSuiObjectId(input.id))) {\n      throw new Error(\"Invalid Sui Object id\");\n    }\n    return await this.transport.request({\n      method: \"sui_getObject\",\n      params: [input.id, input.options],\n      signal: input.signal\n    });\n  }\n  async tryGetPastObject(input) {\n    return await this.transport.request({\n      method: \"sui_tryGetPastObject\",\n      params: [input.id, input.version, input.options],\n      signal: input.signal\n    });\n  }\n  /**\n   * Batch get details about a list of objects. If any of the object ids are duplicates the call will fail\n   */\n  async multiGetObjects(input) {\n    input.ids.forEach((id) => {\n      if (!id || !isValidSuiObjectId(normalizeSuiObjectId(id))) {\n        throw new Error(`Invalid Sui Object id ${id}`);\n      }\n    });\n    const hasDuplicates = input.ids.length !== new Set(input.ids).size;\n    if (hasDuplicates) {\n      throw new Error(`Duplicate object ids in batch call ${input.ids}`);\n    }\n    return await this.transport.request({\n      method: \"sui_multiGetObjects\",\n      params: [input.ids, input.options],\n      signal: input.signal\n    });\n  }\n  /**\n   * Get transaction blocks for a given query criteria\n   */\n  async queryTransactionBlocks({\n    filter,\n    options,\n    cursor,\n    limit,\n    order,\n    signal\n  }) {\n    if (filter && \"MoveFunction\" in filter && isValidNamedPackage(filter.MoveFunction.package)) {\n      filter = {\n        ...filter,\n        MoveFunction: {\n          package: (await this.core.mvr.resolvePackage({\n            package: filter.MoveFunction.package\n          })).package\n        }\n      };\n    }\n    return await this.transport.request({\n      method: \"suix_queryTransactionBlocks\",\n      params: [\n        {\n          filter,\n          options\n        },\n        cursor,\n        limit,\n        (order || \"descending\") === \"descending\"\n      ],\n      signal\n    });\n  }\n  async getTransactionBlock(input) {\n    if (!isValidTransactionDigest(input.digest)) {\n      throw new Error(\"Invalid Transaction digest\");\n    }\n    return await this.transport.request({\n      method: \"sui_getTransactionBlock\",\n      params: [input.digest, input.options],\n      signal: input.signal\n    });\n  }\n  async multiGetTransactionBlocks(input) {\n    input.digests.forEach((d) => {\n      if (!isValidTransactionDigest(d)) {\n        throw new Error(`Invalid Transaction digest ${d}`);\n      }\n    });\n    const hasDuplicates = input.digests.length !== new Set(input.digests).size;\n    if (hasDuplicates) {\n      throw new Error(`Duplicate digests in batch call ${input.digests}`);\n    }\n    return await this.transport.request({\n      method: \"sui_multiGetTransactionBlocks\",\n      params: [input.digests, input.options],\n      signal: input.signal\n    });\n  }\n  async executeTransactionBlock({\n    transactionBlock,\n    signature,\n    options,\n    requestType,\n    signal\n  }) {\n    const result = await this.transport.request({\n      method: \"sui_executeTransactionBlock\",\n      params: [\n        typeof transactionBlock === \"string\" ? transactionBlock : toBase64(transactionBlock),\n        Array.isArray(signature) ? signature : [signature],\n        options\n      ],\n      signal\n    });\n    if (requestType === \"WaitForLocalExecution\") {\n      try {\n        await this.waitForTransaction({\n          digest: result.digest\n        });\n      } catch {\n      }\n    }\n    return result;\n  }\n  async signAndExecuteTransaction({\n    transaction,\n    signer,\n    ...input\n  }) {\n    let transactionBytes;\n    if (transaction instanceof Uint8Array) {\n      transactionBytes = transaction;\n    } else {\n      transaction.setSenderIfNotSet(signer.toSuiAddress());\n      transactionBytes = await transaction.build({ client: this });\n    }\n    const { signature, bytes } = await signer.signTransaction(transactionBytes);\n    return this.executeTransactionBlock({\n      transactionBlock: bytes,\n      signature,\n      ...input\n    });\n  }\n  /**\n   * Get total number of transactions\n   */\n  async getTotalTransactionBlocks({ signal } = {}) {\n    const resp = await this.transport.request({\n      method: \"sui_getTotalTransactionBlocks\",\n      params: [],\n      signal\n    });\n    return BigInt(resp);\n  }\n  /**\n   * Getting the reference gas price for the network\n   */\n  async getReferenceGasPrice({ signal } = {}) {\n    const resp = await this.transport.request({\n      method: \"suix_getReferenceGasPrice\",\n      params: [],\n      signal\n    });\n    return BigInt(resp);\n  }\n  /**\n   * Return the delegated stakes for an address\n   */\n  async getStakes(input) {\n    if (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n      throw new Error(\"Invalid Sui address\");\n    }\n    return await this.transport.request({\n      method: \"suix_getStakes\",\n      params: [input.owner],\n      signal: input.signal\n    });\n  }\n  /**\n   * Return the delegated stakes queried by id.\n   */\n  async getStakesByIds(input) {\n    input.stakedSuiIds.forEach((id) => {\n      if (!id || !isValidSuiObjectId(normalizeSuiObjectId(id))) {\n        throw new Error(`Invalid Sui Stake id ${id}`);\n      }\n    });\n    return await this.transport.request({\n      method: \"suix_getStakesByIds\",\n      params: [input.stakedSuiIds],\n      signal: input.signal\n    });\n  }\n  /**\n   * Return the latest system state content.\n   */\n  async getLatestSuiSystemState({\n    signal\n  } = {}) {\n    return await this.transport.request({\n      method: \"suix_getLatestSuiSystemState\",\n      params: [],\n      signal\n    });\n  }\n  /**\n   * Get events for a given query criteria\n   */\n  async queryEvents({\n    query,\n    cursor,\n    limit,\n    order,\n    signal\n  }) {\n    if (query && \"MoveEventType\" in query && hasMvrName(query.MoveEventType)) {\n      query = {\n        ...query,\n        MoveEventType: (await this.core.mvr.resolveType({\n          type: query.MoveEventType\n        })).type\n      };\n    }\n    if (query && \"MoveEventModule\" in query && isValidNamedPackage(query.MoveEventModule.package)) {\n      query = {\n        ...query,\n        MoveEventModule: {\n          module: query.MoveEventModule.module,\n          package: (await this.core.mvr.resolvePackage({\n            package: query.MoveEventModule.package\n          })).package\n        }\n      };\n    }\n    if (\"MoveModule\" in query && isValidNamedPackage(query.MoveModule.package)) {\n      query = {\n        ...query,\n        MoveModule: {\n          module: query.MoveModule.module,\n          package: (await this.core.mvr.resolvePackage({\n            package: query.MoveModule.package\n          })).package\n        }\n      };\n    }\n    return await this.transport.request({\n      method: \"suix_queryEvents\",\n      params: [query, cursor, limit, (order || \"descending\") === \"descending\"],\n      signal\n    });\n  }\n  /**\n   * Subscribe to get notifications whenever an event matching the filter occurs\n   *\n   * @deprecated\n   */\n  async subscribeEvent(input) {\n    return this.transport.subscribe({\n      method: \"suix_subscribeEvent\",\n      unsubscribe: \"suix_unsubscribeEvent\",\n      params: [input.filter],\n      onMessage: input.onMessage,\n      signal: input.signal\n    });\n  }\n  /**\n   * @deprecated\n   */\n  async subscribeTransaction(input) {\n    return this.transport.subscribe({\n      method: \"suix_subscribeTransaction\",\n      unsubscribe: \"suix_unsubscribeTransaction\",\n      params: [input.filter],\n      onMessage: input.onMessage,\n      signal: input.signal\n    });\n  }\n  /**\n   * Runs the transaction block in dev-inspect mode. Which allows for nearly any\n   * transaction (or Move call) with any arguments. Detailed results are\n   * provided, including both the transaction effects and any return values.\n   */\n  async devInspectTransactionBlock(input) {\n    let devInspectTxBytes;\n    if (isTransaction(input.transactionBlock)) {\n      input.transactionBlock.setSenderIfNotSet(input.sender);\n      devInspectTxBytes = toBase64(\n        await input.transactionBlock.build({\n          client: this,\n          onlyTransactionKind: true\n        })\n      );\n    } else if (typeof input.transactionBlock === \"string\") {\n      devInspectTxBytes = input.transactionBlock;\n    } else if (input.transactionBlock instanceof Uint8Array) {\n      devInspectTxBytes = toBase64(input.transactionBlock);\n    } else {\n      throw new Error(\"Unknown transaction block format.\");\n    }\n    input.signal?.throwIfAborted();\n    return await this.transport.request({\n      method: \"sui_devInspectTransactionBlock\",\n      params: [input.sender, devInspectTxBytes, input.gasPrice?.toString(), input.epoch],\n      signal: input.signal\n    });\n  }\n  /**\n   * Dry run a transaction block and return the result.\n   */\n  async dryRunTransactionBlock(input) {\n    return await this.transport.request({\n      method: \"sui_dryRunTransactionBlock\",\n      params: [\n        typeof input.transactionBlock === \"string\" ? input.transactionBlock : toBase64(input.transactionBlock)\n      ]\n    });\n  }\n  /**\n   * Return the list of dynamic field objects owned by an object\n   */\n  async getDynamicFields(input) {\n    if (!input.parentId || !isValidSuiObjectId(normalizeSuiObjectId(input.parentId))) {\n      throw new Error(\"Invalid Sui Object id\");\n    }\n    return await this.transport.request({\n      method: \"suix_getDynamicFields\",\n      params: [input.parentId, input.cursor, input.limit],\n      signal: input.signal\n    });\n  }\n  /**\n   * Return the dynamic field object information for a specified object\n   */\n  async getDynamicFieldObject(input) {\n    return await this.transport.request({\n      method: \"suix_getDynamicFieldObject\",\n      params: [input.parentId, input.name],\n      signal: input.signal\n    });\n  }\n  /**\n   * Get the sequence number of the latest checkpoint that has been executed\n   */\n  async getLatestCheckpointSequenceNumber({\n    signal\n  } = {}) {\n    const resp = await this.transport.request({\n      method: \"sui_getLatestCheckpointSequenceNumber\",\n      params: [],\n      signal\n    });\n    return String(resp);\n  }\n  /**\n   * Returns information about a given checkpoint\n   */\n  async getCheckpoint(input) {\n    return await this.transport.request({\n      method: \"sui_getCheckpoint\",\n      params: [input.id],\n      signal: input.signal\n    });\n  }\n  /**\n   * Returns historical checkpoints paginated\n   */\n  async getCheckpoints(input) {\n    return await this.transport.request({\n      method: \"sui_getCheckpoints\",\n      params: [input.cursor, input?.limit, input.descendingOrder],\n      signal: input.signal\n    });\n  }\n  /**\n   * Return the committee information for the asked epoch\n   */\n  async getCommitteeInfo(input) {\n    return await this.transport.request({\n      method: \"suix_getCommitteeInfo\",\n      params: [input?.epoch],\n      signal: input?.signal\n    });\n  }\n  async getNetworkMetrics({ signal } = {}) {\n    return await this.transport.request({\n      method: \"suix_getNetworkMetrics\",\n      params: [],\n      signal\n    });\n  }\n  async getAddressMetrics({ signal } = {}) {\n    return await this.transport.request({\n      method: \"suix_getLatestAddressMetrics\",\n      params: [],\n      signal\n    });\n  }\n  async getEpochMetrics(input) {\n    return await this.transport.request({\n      method: \"suix_getEpochMetrics\",\n      params: [input?.cursor, input?.limit, input?.descendingOrder],\n      signal: input?.signal\n    });\n  }\n  async getAllEpochAddressMetrics(input) {\n    return await this.transport.request({\n      method: \"suix_getAllEpochAddressMetrics\",\n      params: [input?.descendingOrder],\n      signal: input?.signal\n    });\n  }\n  /**\n   * Return the committee information for the asked epoch\n   */\n  async getEpochs(input) {\n    return await this.transport.request({\n      method: \"suix_getEpochs\",\n      params: [input?.cursor, input?.limit, input?.descendingOrder],\n      signal: input?.signal\n    });\n  }\n  /**\n   * Returns list of top move calls by usage\n   */\n  async getMoveCallMetrics({ signal } = {}) {\n    return await this.transport.request({\n      method: \"suix_getMoveCallMetrics\",\n      params: [],\n      signal\n    });\n  }\n  /**\n   * Return the committee information for the asked epoch\n   */\n  async getCurrentEpoch({ signal } = {}) {\n    return await this.transport.request({\n      method: \"suix_getCurrentEpoch\",\n      params: [],\n      signal\n    });\n  }\n  /**\n   * Return the Validators APYs\n   */\n  async getValidatorsApy({ signal } = {}) {\n    return await this.transport.request({\n      method: \"suix_getValidatorsApy\",\n      params: [],\n      signal\n    });\n  }\n  // TODO: Migrate this to `sui_getChainIdentifier` once it is widely available.\n  async getChainIdentifier({ signal } = {}) {\n    const checkpoint = await this.getCheckpoint({ id: \"0\", signal });\n    const bytes = fromBase58(checkpoint.digest);\n    return toHex(bytes.slice(0, 4));\n  }\n  async resolveNameServiceAddress(input) {\n    return await this.transport.request({\n      method: \"suix_resolveNameServiceAddress\",\n      params: [input.name],\n      signal: input.signal\n    });\n  }\n  async resolveNameServiceNames({\n    format = \"dot\",\n    ...input\n  }) {\n    const { nextCursor, hasNextPage, data } = await this.transport.request({\n      method: \"suix_resolveNameServiceNames\",\n      params: [input.address, input.cursor, input.limit],\n      signal: input.signal\n    });\n    return {\n      hasNextPage,\n      nextCursor,\n      data: data.map((name) => normalizeSuiNSName(name, format))\n    };\n  }\n  async getProtocolConfig(input) {\n    return await this.transport.request({\n      method: \"sui_getProtocolConfig\",\n      params: [input?.version],\n      signal: input?.signal\n    });\n  }\n  async verifyZkLoginSignature(input) {\n    return await this.transport.request({\n      method: \"sui_verifyZkLoginSignature\",\n      params: [input.bytes, input.signature, input.intentScope, input.author],\n      signal: input.signal\n    });\n  }\n  /**\n   * Wait for a transaction block result to be available over the API.\n   * This can be used in conjunction with `executeTransactionBlock` to wait for the transaction to\n   * be available via the API.\n   * This currently polls the `getTransactionBlock` API to check for the transaction.\n   */\n  async waitForTransaction({\n    signal,\n    timeout = 60 * 1e3,\n    pollInterval = 2 * 1e3,\n    ...input\n  }) {\n    const timeoutSignal = AbortSignal.timeout(timeout);\n    const timeoutPromise = new Promise((_, reject) => {\n      timeoutSignal.addEventListener(\"abort\", () => reject(timeoutSignal.reason));\n    });\n    timeoutPromise.catch(() => {\n    });\n    while (!timeoutSignal.aborted) {\n      signal?.throwIfAborted();\n      try {\n        return await this.getTransactionBlock(input);\n      } catch {\n        await Promise.race([\n          new Promise((resolve) => setTimeout(resolve, pollInterval)),\n          timeoutPromise\n        ]);\n      }\n    }\n    timeoutSignal.throwIfAborted();\n    throw new Error(\"Unexpected error while waiting for transaction block.\");\n  }\n}\nexport {\n  SuiJsonRpcClient,\n  isSuiJsonRpcClient\n};\n\n"],
  "mappings": "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",
  "names": ["__typeError", "__accessCheck", "__privateGet", "__privateAdd", "__privateSet", "__privateMethod", "_requestId", "__typeError", "__accessCheck", "__privateGet", "__privateAdd", "__privateSet"]
}
